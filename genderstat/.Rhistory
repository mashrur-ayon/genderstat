load("~/GitHub/genderstat/genderstat/data/simulated_data_GII.RData")
View(simulated_data_GII)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check(args = "--as-cran")
devtools::check(args = "--as-cran")
usethis::use_testthat()
# Load necessary libraries and data
library(testthat)
load("/data/simulated_data_GDI.RData")
getwd()
# Load necessary libraries and data
library(testthat)
load("C:/Users/Asus/OneDrive/Documents/GitHub/genderstat/genderstat/data/simulated_data_GDI.RData")
test_that("gender_development_index produces expected output", {
# Execute the function
result <- gender_development_index(simulated_data_GDI)
# Check if the result is a data frame
expect_true(is.data.frame(result))
# Check if the result has the expected number of columns
expect_equal(ncol(result), 4)
# Check if the result has the expected column names
expected_colnames <- c("country", "LEI", "EI", "GDI")
expect_equal(colnames(result), expected_colnames)
# You can also add more specific tests, e.g., check values, ranges, etc.
})
# Load necessary libraries and data
library(testthat)
load("C:/Users/Asus/OneDrive/Documents/GitHub/genderstat/genderstat/data/simulated_data_GDI.RData")
test_that("gender_development_index produces expected output", {
# Execute the function
result <- gender_development_index(simulated_data_GDI)
# Check if the result is a data frame
expect_true(is.data.frame(result))
# Check if the result has the expected number of columns
expect_equal(ncol(result), 4)
# Check if the result has the expected column names
expected_colnames <- c("country", "female_life_expectancy",	"male_life_expectancy",	"female_mean_schooling",	"male_mean_schooling",	"female_gni_per_capita",	"male_gni_per_capita")
expect_equal(colnames(result), expected_colnames)
# You can also add more specific tests, e.g., check values, ranges, etc.
})
# Load necessary libraries and data
library(testthat)
load("C:/Users/Asus/OneDrive/Documents/GitHub/genderstat/genderstat/inst/simulated_data_GDI.csv")
# Load necessary libraries and data
library(testthat)
load("C:/Users/Asus/OneDrive/Documents/GitHub/genderstat/genderstat/data/simulated_data_GDI.RData")
gender_development_index(simulated_data_GDI)
test_that("gender_development_index produces expected output", {
# Execute the function
result <- gender_development_index(simulated_data_GDI)
# Check if the result is a data frame
expect_true(is.data.frame(result))
# Check if the result has the expected number of columns
expect_equal(ncol(result), 7)
# Check if the result has the expected column names
expected_colnames <- c("country", "female_life_expectancy",	"male_life_expectancy",	"female_mean_schooling",	"male_mean_schooling",	"female_gni_per_capita",	"male_gni_per_capita")
expect_equal(colnames(result), expected_colnames)
# You can also add more specific tests, e.g., check values, ranges, etc.
})
result <- gender_development_index(simulated_data_GDI)
# Load necessary libraries and data
library(testthat)
load("C:/Users/Asus/OneDrive/Documents/GitHub/genderstat/genderstat/data/simulated_data_GDI.RData")
test_that("gender_development_index produces expected output", {
# Execute the function
result <- gender_development_index(simulated_data_GDI)
# Check if the result is a data frame
expect_true(is.numeric(result))
# Check if the result has the expected number of columns
expect_equal(ncol(result), 7)
# Check if the result has the expected column names
expected_colnames <- c("country", "female_life_expectancy",	"male_life_expectancy",	"female_mean_schooling",	"male_mean_schooling",	"female_gni_per_capita",	"male_gni_per_capita")
expect_equal(colnames(result), expected_colnames)
# You can also add more specific tests, e.g., check values, ranges, etc.
})
# Load necessary libraries and data
library(testthat)
load("C:/Users/Asus/OneDrive/Documents/GitHub/genderstat/genderstat/data/simulated_data_GDI.RData")
test_that("gender_development_index produces expected output", {
# Execute the function
result <- gender_development_index(simulated_data_GDI)
# Check if the result is a data frame
expect_true(is.numeric(result))
# Check if the result has the expected number of columns
expect_equal(ncol(result), 7)
# You can also add more specific tests, e.g., check values, ranges, etc.
})
# Load necessary libraries and data
library(testthat)
load("C:/Users/Asus/OneDrive/Documents/GitHub/genderstat/genderstat/data/simulated_data_GDI.RData")
test_that("gender_development_index produces expected output", {
# Execute the function
result <- gender_development_index(simulated_data_GDI)
# Check if the result is a data frame
expect_true(is.numeric(result))
# You can also add more specific tests, e.g., check values, ranges, etc.
})
library(ggplot2)
result <-
library(ggplot2)
# Assuming you've stored the results from gender_development_index in a variable named 'results'
results <- gender_development_index(simulated_data_GDI)
# Sort the results by GDI for better visualization
results <- results[order(-results$GDI), ]
library(ggplot2)
# Assuming you've stored the results from gender_development_index in a variable named 'results'
results <- gender_development_index(simulated_data_GDI)
# Sort the results by GDI for better visualization
results <- results[order(-results$GDI), ]
library(ggplot2)
# Assuming you've stored the results from gender_development_index in a variable named 'results'
results <- gender_development_index(simulated_data_GDI)
str(results)
# Sort the results by GDI for better visualization
results <- results[order(-results$GDI), ]
# Assuming you've stored the results from gender_development_index in a variable named 'results'
results <- gender_development_index(simulated_data_GDI)
str(results)
# Sort the results by GDI for better visualization
results <- results[order(-results$GDI), ]
# Assuming you've stored the results from gender_development_index in a variable named 'results'
results <- gender_development_index(simulated_data_GDI)
str(results)
ggplot(df_results, aes(x = 1:length(GDI), y = GDI)) +
geom_point() +
labs(title = "Gender Development Index (GDI) Distribution",
x = "Countries (indexed from 1 to 200)",
y = "GDI Value") +
theme_minimal()
library(ggplot2)
# Assuming you've stored the results from gender_development_index in a variable named 'results'
results <- gender_development_index(simulated_data_GDI)
str(results)
df_results <- data.frame(GDI = results)
ggplot(df_results, aes(x = 1:length(GDI), y = GDI)) +
geom_point() +
labs(title = "Gender Development Index (GDI) Distribution",
x = "Countries (indexed from 1 to 200)",
y = "GDI Value") +
theme_minimal()
View(simulated_data_GDI)
library(ggplot2)
# Assuming you've stored the results from gender_development_index in a variable named 'results'
results <- gender_development_index(simulated_data_GDI)
str(results)
df_results <- data.frame(GDI = results)
ggplot(df_results, aes(x = 1:length(GDI), y = GDI)) +
geom_point() +
labs(title = "Gender Development Index (GDI) Distribution",
x = "Countries (indexed from 1 to 200)",
y = "GDI Value") +
theme_minimal()
devtools::check(args = "--as-cran")
devtools::build()
use_mit_license()
usethis::use_mit_license()
devtools::check(args = "--as-cran")
devtools::check(args = "--as-cran")
devtools::check(args = "--as-cran")
devtools::check(args = "--as-cran")
