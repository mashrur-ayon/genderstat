load("~/GitHub/genderstat/genderstat/data/simulated_data_GII.RData")
View(simulated_data_GII)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check(args = "--as-cran")
devtools::check(args = "--as-cran")
usethis::use_testthat()
# Load necessary libraries and data
library(testthat)
load("/data/simulated_data_GDI.RData")
getwd()
# Load necessary libraries and data
library(testthat)
load("C:/Users/Asus/OneDrive/Documents/GitHub/genderstat/genderstat/data/simulated_data_GDI.RData")
test_that("gender_development_index produces expected output", {
# Execute the function
result <- gender_development_index(simulated_data_GDI)
# Check if the result is a data frame
expect_true(is.data.frame(result))
# Check if the result has the expected number of columns
expect_equal(ncol(result), 4)
# Check if the result has the expected column names
expected_colnames <- c("country", "LEI", "EI", "GDI")
expect_equal(colnames(result), expected_colnames)
# You can also add more specific tests, e.g., check values, ranges, etc.
})
# Load necessary libraries and data
library(testthat)
load("C:/Users/Asus/OneDrive/Documents/GitHub/genderstat/genderstat/data/simulated_data_GDI.RData")
test_that("gender_development_index produces expected output", {
# Execute the function
result <- gender_development_index(simulated_data_GDI)
# Check if the result is a data frame
expect_true(is.data.frame(result))
# Check if the result has the expected number of columns
expect_equal(ncol(result), 4)
# Check if the result has the expected column names
expected_colnames <- c("country", "female_life_expectancy",	"male_life_expectancy",	"female_mean_schooling",	"male_mean_schooling",	"female_gni_per_capita",	"male_gni_per_capita")
expect_equal(colnames(result), expected_colnames)
# You can also add more specific tests, e.g., check values, ranges, etc.
})
# Load necessary libraries and data
library(testthat)
load("C:/Users/Asus/OneDrive/Documents/GitHub/genderstat/genderstat/inst/simulated_data_GDI.csv")
# Load necessary libraries and data
library(testthat)
load("C:/Users/Asus/OneDrive/Documents/GitHub/genderstat/genderstat/data/simulated_data_GDI.RData")
gender_development_index(simulated_data_GDI)
test_that("gender_development_index produces expected output", {
# Execute the function
result <- gender_development_index(simulated_data_GDI)
# Check if the result is a data frame
expect_true(is.data.frame(result))
# Check if the result has the expected number of columns
expect_equal(ncol(result), 7)
# Check if the result has the expected column names
expected_colnames <- c("country", "female_life_expectancy",	"male_life_expectancy",	"female_mean_schooling",	"male_mean_schooling",	"female_gni_per_capita",	"male_gni_per_capita")
expect_equal(colnames(result), expected_colnames)
# You can also add more specific tests, e.g., check values, ranges, etc.
})
result <- gender_development_index(simulated_data_GDI)
# Load necessary libraries and data
library(testthat)
load("C:/Users/Asus/OneDrive/Documents/GitHub/genderstat/genderstat/data/simulated_data_GDI.RData")
test_that("gender_development_index produces expected output", {
# Execute the function
result <- gender_development_index(simulated_data_GDI)
# Check if the result is a data frame
expect_true(is.numeric(result))
# Check if the result has the expected number of columns
expect_equal(ncol(result), 7)
# Check if the result has the expected column names
expected_colnames <- c("country", "female_life_expectancy",	"male_life_expectancy",	"female_mean_schooling",	"male_mean_schooling",	"female_gni_per_capita",	"male_gni_per_capita")
expect_equal(colnames(result), expected_colnames)
# You can also add more specific tests, e.g., check values, ranges, etc.
})
# Load necessary libraries and data
library(testthat)
load("C:/Users/Asus/OneDrive/Documents/GitHub/genderstat/genderstat/data/simulated_data_GDI.RData")
test_that("gender_development_index produces expected output", {
# Execute the function
result <- gender_development_index(simulated_data_GDI)
# Check if the result is a data frame
expect_true(is.numeric(result))
# Check if the result has the expected number of columns
expect_equal(ncol(result), 7)
# You can also add more specific tests, e.g., check values, ranges, etc.
})
# Load necessary libraries and data
library(testthat)
load("C:/Users/Asus/OneDrive/Documents/GitHub/genderstat/genderstat/data/simulated_data_GDI.RData")
test_that("gender_development_index produces expected output", {
# Execute the function
result <- gender_development_index(simulated_data_GDI)
# Check if the result is a data frame
expect_true(is.numeric(result))
# You can also add more specific tests, e.g., check values, ranges, etc.
})
library(ggplot2)
result <-
library(ggplot2)
# Assuming you've stored the results from gender_development_index in a variable named 'results'
results <- gender_development_index(simulated_data_GDI)
# Sort the results by GDI for better visualization
results <- results[order(-results$GDI), ]
library(ggplot2)
# Assuming you've stored the results from gender_development_index in a variable named 'results'
results <- gender_development_index(simulated_data_GDI)
# Sort the results by GDI for better visualization
results <- results[order(-results$GDI), ]
library(ggplot2)
# Assuming you've stored the results from gender_development_index in a variable named 'results'
results <- gender_development_index(simulated_data_GDI)
str(results)
# Sort the results by GDI for better visualization
results <- results[order(-results$GDI), ]
# Assuming you've stored the results from gender_development_index in a variable named 'results'
results <- gender_development_index(simulated_data_GDI)
str(results)
# Sort the results by GDI for better visualization
results <- results[order(-results$GDI), ]
# Assuming you've stored the results from gender_development_index in a variable named 'results'
results <- gender_development_index(simulated_data_GDI)
str(results)
ggplot(df_results, aes(x = 1:length(GDI), y = GDI)) +
geom_point() +
labs(title = "Gender Development Index (GDI) Distribution",
x = "Countries (indexed from 1 to 200)",
y = "GDI Value") +
theme_minimal()
library(ggplot2)
# Assuming you've stored the results from gender_development_index in a variable named 'results'
results <- gender_development_index(simulated_data_GDI)
str(results)
df_results <- data.frame(GDI = results)
ggplot(df_results, aes(x = 1:length(GDI), y = GDI)) +
geom_point() +
labs(title = "Gender Development Index (GDI) Distribution",
x = "Countries (indexed from 1 to 200)",
y = "GDI Value") +
theme_minimal()
View(simulated_data_GDI)
library(ggplot2)
# Assuming you've stored the results from gender_development_index in a variable named 'results'
results <- gender_development_index(simulated_data_GDI)
str(results)
df_results <- data.frame(GDI = results)
ggplot(df_results, aes(x = 1:length(GDI), y = GDI)) +
geom_point() +
labs(title = "Gender Development Index (GDI) Distribution",
x = "Countries (indexed from 1 to 200)",
y = "GDI Value") +
theme_minimal()
devtools::check(args = "--as-cran")
devtools::build()
use_mit_license()
usethis::use_mit_license()
devtools::check(args = "--as-cran")
devtools::check(args = "--as-cran")
devtools::check(args = "--as-cran")
devtools::check(args = "--as-cran")
load("~/GitHub/genderstat/genderstat/data/simulated_data_GDI.RData")
View(simulated_data_GDI)
load("~/GitHub/genderstat/genderstat/data/simulated_data_GEM.RData")
load("~/GitHub/genderstat/genderstat/data/simulated_data_GII.RData")
load("~/GitHub/genderstat/genderstat/data/simulated_data_GPG.RData")
View(simulated_data_GDI)
View(simulated_data_GEM)
View(simulated_data_GII)
View(simulated_data_GPG)
load("~/GitHub/genderstat/genderstat/data/simulated_data_GDI.RData")
View(simulated_data_GDI)
load("~/GitHub/genderstat/genderstat/data/simulated_data_GEM.RData")
View(simulated_data_GEM)
load("~/GitHub/genderstat/genderstat/data/simulated_data_GII.RData")
View(simulated_data_GII)
load("~/GitHub/genderstat/genderstat/data/simulated_data_GPG.RData")
View(simulated_data_GPG)
View(simulated_data_GDI)
getwd()
GDI <- read.csv("real_data_GDI.csv", stringsAsFactors = FALSE)
save(GDI, file = "real_data_GDI.RData")
GEM <- read.csv("real_data_GEM.csv", stringsAsFactors = FALSE)
GII <- read.csv("real_data_GII.csv", stringsAsFactors = FALSE)
GPG <- read.csv("real_data_GPG.csv", stringsAsFactors = FALSE)
save(GEM, GII, GPG, file = "combined_data.RData")
GEM <- read.csv("real_data_GEM.csv", stringsAsFactors = FALSE)
save(GEM, file = "real_data_GEM.RData")
View(GEM)
read.csv("real_data_GII.csv", stringsAsFactors = FALSE)
GII <- read.csv("real_data_GII.csv", stringsAsFactors = FALSE)
save(GII, file = "real_data_GII.RData")
View(GII)
GPG <- read.csv("real_data_GPG.csv", stringsAsFactors = FALSE)
save(GPG, file = "real_data_GPG.RData")
load("~/GitHub/genderstat/genderstat/real_data_GDI.RData")
View(GDI)
gender_development_index(GDI)
GDI(real_data_GDI)
#' Gender Development Index (GDI)
#'
#' Computes the Gender Development Index (GDI) based on the given dataset.
#'
#' @param data A data frame containing the required metrics for GDI computation.
#'
#' @return A numeric vector representing the GDI values.
#'
#' @examples
#' \dontrun{
#' data(gender_development_index_data) # Load example dataset
#' gdi_results <- gender_development_index(gender_development_index_data)
#' print(gdi_results)
#' }
#'
#' @export
gender_development_index <- function(data) {
...
}
#' Original Data of GDI (GDI)
#'
#' A dataset containing observed values for the GDI analysis. Obtained from
#'
#' @format A data frame with 191 rows and 7 columns:
#' \describe{
#'   \item{country}{A character vector representing the name of the country.}
#'   \item{female_life_expectancy}{A numeric vector representing the life expectancy of females in the respective country. Measured in years.}
#'   \item{male_life_expectancy}{A numeric vector representing the life expectancy of males in the respective country. Measured in years.}
#'   \item{female_mean_schooling}{A numeric vector representing the average number of schooling years for females in the respective country.}
#'   \item{male_mean_schooling}{A numeric vector representing the average number of schooling years for males in the respective country.}
#'   \item{female_gni_per_capita}{A numeric vector representing the Gross National Income per capita for females in the respective country. Measured in international dollars.}
#'   \item{male_gni_per_capita}{A numeric vector representing the Gross National Income per capita for males in the respective country. Measured in international dollars.}
#' }
#' @source The dataset is simulated for the purpose of this package.
#' @name simulated_data_GDI
#' @docType data
#' @usage data(real_data_GDI)
NULL
###########################################################
gender_development_index <- function(data) {
# Check input data for required columns
required_columns <- c("female_life_expectancy", "male_life_expectancy",
"female_mean_schooling", "male_mean_schooling",
"female_gni_per_capita", "male_gni_per_capita")
if (!all(required_columns %in% colnames(data))) {
stop("The input data must contain the required columns for GDI calculation.")
}
# Calculate HDI components for each gender
female_health <- data$female_life_expectancy / 85
male_health <- data$male_life_expectancy / 85
female_education <- data$female_mean_schooling / 15
male_education <- data$male_mean_schooling / 15
female_standard_of_living <- log(data$female_gni_per_capita) / log(75000)
male_standard_of_living <- log(data$male_gni_per_capita) / log(75000)
# Calculate HDI for each gender
female_hdi <- (female_health * female_education * female_standard_of_living)^(1/3)
male_hdi <- (male_health * male_education * male_standard_of_living)^(1/3)
# Calculate GDI
GDI <- female_hdi / (female_hdi + male_hdi)
return(GDI)
}
gender_development_index(real_data_GDI)
gender_development_index(GDI)
View(GDI)
x <- gender_development_index(GDI)
real_GDI <- read.csv("real_data_GDI.csv", stringsAsFactors = FALSE)
real_GEM <- read.csv("real_data_GEM.csv", stringsAsFactors = FALSE)
real_GII <- read.csv("real_data_GII.csv", stringsAsFactors = FALSE)
real_GPG <- read.csv("real_data_GPG.csv", stringsAsFactors = FALSE)
save(real_GDI, file = "real_data_GDI.RData")
save(real_GEM, file = "real_data_GEM.RData")
save(real_GII, file = "real_data_GII.RData")
save(real_GPG, file = "real_data_GPG.RData")
#' Gender Development Index (GDI)
#'
#' Computes the Gender Development Index (GDI) based on the given dataset.
#'
#' @param data A data frame containing the required metrics for GDI computation.
#'
#' @return A numeric vector representing the GDI values.
#'
#' #' @examples
#' data(gender_development_index_data) # Load example dataset
#' gdi_results <- gender_development_index(gender_development_index_data)
#' print(gdi_results)
#'
#' @export
gender_development_index <- function(data) {
...
}
#' Original Data of GDI (GDI)
#'
#' A dataset containing observed values for the GDI analysis.
#'
#' @format A data frame with 191 rows and 7 columns:
#' \describe{
#'   \item{country}{A character vector representing the name of the country.}
#'   \item{female_life_expectancy}{A numeric vector representing the life expectancy of females in the respective country. Measured in years.}
#'   \item{male_life_expectancy}{A numeric vector representing the life expectancy of males in the respective country. Measured in years.}
#'   \item{female_mean_schooling}{A numeric vector representing the average number of schooling years for females in the respective country.}
#'   \item{male_mean_schooling}{A numeric vector representing the average number of schooling years for males in the respective country.}
#'   \item{female_gni_per_capita}{A numeric vector representing the Gross National Income per capita for females in the respective country. Measured in international dollars.}
#'   \item{male_gni_per_capita}{A numeric vector representing the Gross National Income per capita for males in the respective country. Measured in international dollars.}
#' }
#' @source Data extracted from \href{https://hdr.undp.org/data-center/documentation-and-downloads}{United Nations Development Programme} and \href{https://genderdata.worldbank.org/indicators/}{The World Bank Gender Data Portal}.
#' @name real_data_GDI
#' @docType data
#' @usage data(real_data_GDI)
NULL
###########################################################
gender_development_index <- function(data) {
# Check input data for required columns
required_columns <- c("female_life_expectancy", "male_life_expectancy",
"female_mean_schooling", "male_mean_schooling",
"female_gni_per_capita", "male_gni_per_capita")
if (!all(required_columns %in% colnames(data))) {
stop("The input data must contain the required columns for GDI calculation.")
}
# Calculate HDI components for each gender
female_health <- data$female_life_expectancy / 85
male_health <- data$male_life_expectancy / 85
female_education <- data$female_mean_schooling / 15
male_education <- data$male_mean_schooling / 15
female_standard_of_living <- log(data$female_gni_per_capita) / log(75000)
male_standard_of_living <- log(data$male_gni_per_capita) / log(75000)
# Calculate HDI for each gender
female_hdi <- (female_health * female_education * female_standard_of_living)^(1/3)
male_hdi <- (male_health * male_education * male_standard_of_living)^(1/3)
# Calculate GDI
GDI <- female_hdi / (female_hdi + male_hdi)
return(GDI)
}
x <- gender_development_index(real_GDI)
#' Gender Pay Gap (GPG)
#'
#' Computes the Gender Pay Gap (GPG) based on the provided dataset.
#'
#' @param data A data frame containing the required metrics for GPG computation.
#'
#' @return A numeric vector representing the GPG values.
#' @importFrom stats aggregate
#' @examples
#' data(gender_pay_gap_data) # Load example dataset
#' gpg_results <- gender_pay_gap(gender_pay_gap_data)
#' print(gpg_results)
#'
#' @export
gender_pay_gap <- function(data) {
...
}
#' Original Data for Gender Pay Gap (GPG)
#'
#' A dataset containing observed values for the GPG analysis.
#'
#' @format A data frame with 191 rows and 3 columns:
#' \describe{
#'   \item{person}{Simulated ID of person}
#'   \item{gender}{Identified Gender}
#'   \item{salary}{Salary of the person}
#' }
#' @source Data obtained from the following sources:
#' \itemize{
#'   \item{\href{https://hdr.undp.org/data-center/documentation-and-downloads}{UNDP Human Development Reports Data Center}}
#'   \item{\href{https://genderdata.worldbank.org/indicators/}{World Bank Gender Data Portal}}
#' }
#' @name real_data_GPG
#' @docType data
#' @usage data(real_data_GPG)
NULL
##########################################################
##########################################################
gender_pay_gap <- function(data) {
# Check input data for required columns
if (!all(c("female_income", "male_income") %in% colnames(data))) {
stop("The input data must contain 'female_income' and 'male_income' columns.")
}
# Calculate the gender pay gap for each country
data$gpg <- ((data$male_income - data$female_income) / data$male_income) * 100
# Return the results
return(data[, c("country", "gpg")])
}
y <- gender_pay_gap("real_GPG")
View(real_GPG)
y <- gender_pay_gap(real_GPG)
y <- gender_pay_gap(real_GPG)
y
roxygen2::roxygenise()
devtools::document()
devtools::document()
roxygen2::roxygenise()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
read.csv("real_data_GDI")
read.csv("real_data_GDI")
real_data_GDI <- read.csv("real_data_GDI.csv")
save(real_data_GDI, file = "real_data_GDI.RData")
real_data_GII <- read.csv("real_data_GII.csv")
save(real_data_GII, file = "real_data_GII.RData")
real_data_GEM <- read.csv("real_data_GEM.csv")
save(real_data_GEM, file = "real_data_GEM.RData")
real_data_GPG <- read.csv("real_data_GPG.csv")
save(real_data_GPG, file = "real_data_GPG.RData")
devtools::document()
devtools::document()
devtools::document()
View(real_data_GPG)
#' Gender Pay Gap (GPG)
#'
#' Computes the Gender Pay Gap (GPG) based on the provided dataset.
#'
#' @param data A data frame containing the required metrics for GPG computation.
#'
#' @return A numeric vector representing the GPG values.
#' @importFrom stats aggregate
#'
#' @examples
#' \dontrun{
#' data(real_data_GPG) # Load example dataset
#' gpg_results <- gender_pay_gap(real_data_GPG)
#' print(gpg_results)
#'}
#' @export
gender_pay_gap <- function(data) {
...
}
#' Original Data for Gender Pay Gap (GPG)
#'
#' A dataset containing observed values for the GPG analysis.
#'
#' @format A data frame with 191 rows and 3 columns:
#' \describe{
#'   \item{country}{Name of Country}
#'   \item{female_income}{Per capita female National Income}
#'   \item{male_income}{Per capita male National Income}
#' }
#' @source Data obtained from the following sources:
#' \itemize{
#'   \item{\href{https://hdr.undp.org/data-center/documentation-and-downloads}{UNDP Human Development Reports Data Center}}
#'   \item{\href{https://genderdata.worldbank.org/indicators/}{World Bank Gender Data Portal}}
#' }
#' @name real_data_GPG
#' @docType data
#' @usage data(real_data_GPG)
NULL
##########################################################
##########################################################
gender_pay_gap <- function(data) {
# Check input data for required columns
if (!all(c("female_income", "male_income") %in% colnames(data))) {
stop("The input data must contain 'female_income' and 'male_income' columns.")
}
# Calculate the gender pay gap for each country
data$gpg <- ((data$male_income - data$female_income) / data$male_income) * 100
# Return the results
return(data[, c("country", "gpg")])
}
devtools::document()
devtools::document()
data(real_data_GPG)
gpg_results <- gender_pay_gap(real_data_GPG)
print(gpg_results)
devtools::document()
data(real_data_GEM) # Load example dataset
gem_results <- gender_empowerment_measure(real_data_GEM)
View(real_data_GEM)
real_data_GEM <- read.csv("real_data_GEM.csv")
save(real_data_GEM, file = "real_data_GEM.RData")
data(real_data_GEM)
View(real_data_GEM)
gem_results <- gender_empowerment_measure(real_data_GEM)
print(gem_results)
data(real_data_GII)
gii_results <- gender_inequality_index(real_data_GII)
View(real_data_GII)
real_data_GII <- read.csv("real_data_GII.csv")
save(real_data_GII, file = "real_data_GII.RData")
data(real_data_GII)
gii_results <- gender_inequality_index(real_data_GII)
print(gii_results)
library(ggplot2)
plot_gpg <- function(data) {
# First, compute the GPG for the provided data
gpg_data <- gender_pay_gap(data)
# Sort the data by GPG for better visualization
gpg_data <- gpg_data[order(-gpg_data$gpg), ]
# Create a bar plot using ggplot2
ggplot(gpg_data, aes(x = reorder(country, -gpg), y = gpg)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Gender Pay Gap by Country",
x = "Country",
y = "Gender Pay Gap (%)") +
theme_minimal()
}
data(real_data_GPG)
plot_gpg(real_data_GPG)
library(plotly)
plot_gpg_scrollable <- function(data) {
# Compute the GPG for the provided data
gpg_data <- gender_pay_gap(data)
# Create a bar plot using plotly
plot_ly(gpg_data, x = ~gpg, y = ~country, type = "bar", orientation = 'h') %>%
layout(title = "Gender Pay Gap by Country",
xaxis = list(title = "Gender Pay Gap (%)"),
yaxis = list(title = "Country", dtick = 1),
margin = list(l = 150)) # To ensure country names fit well
}
# Usage
plot_gpg_scrollable(real_data_GPG)
