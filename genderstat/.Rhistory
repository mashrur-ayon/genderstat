#' @return A ggplot2 object visualizing the GPG for the top 5 countries.
#' @importFrom ggplot2 ggplot aes geom_bar coord_flip labs theme_minimal
#'
#' @examples
#' \dontrun{
#' data(real_data_GPG) # Load example dataset
#' plot_gpg(real_data_GPG)
#' }
#'
#' @export
plot_gpg <- function(data) {
...
}
#' Plot Gender Pay Gap for First Quartile Countries
#'
#' Visualizes the Gender Pay Gap (GPG) for countries in the top quartile (Q1) based on their GPG.
#'
#' @param data A data frame containing the required metrics for GPG computation.
#'
#' @return A ggplot2 object visualizing the GPG for Q1 countries.
#' @importFrom ggplot2 ggplot aes geom_bar coord_flip labs theme_minimal
#'
#' @examples
#' \dontrun{
#' data(real_data_GPG) # Load example dataset
#' plot_gpg_q1(real_data_GPG)
#' }
#'
#' @export
plot_gpg_q1 <- function(data) {
...
}
#' Plot Gender Pay Gap for Second Quartile Countries
#'
#' Visualizes the Gender Pay Gap (GPG) for countries in the second quartile (Q2) based on their GPG.
#'
#' @param data A data frame containing the required metrics for GPG computation.
#'
#' @return A ggplot2 object visualizing the GPG for Q2 countries.
#' @importFrom ggplot2 ggplot aes geom_bar coord_flip labs theme_minimal
#'
#' @examples
#' \dontrun{
#' data(real_data_GPG) # Load example dataset
#' plot_gpg_q2(real_data_GPG)
#' }
#'
#' @export
plot_gpg_q2 <- function(data) {
...
}
#' Plot Gender Pay Gap for Third Quartile Countries
#'
#' Visualizes the Gender Pay Gap (GPG) for countries in the third quartile (Q3) based on their GPG.
#'
#' @param data A data frame containing the required metrics for GPG computation.
#'
#' @return A ggplot2 object visualizing the GPG for Q3 countries.
#' @importFrom ggplot2 ggplot aes geom_bar coord_flip labs theme_minimal
#'
#' @examples
#' \dontrun{
#' data(real_data_GPG) # Load example dataset
#' plot_gpg_q3(real_data_GPG)
#' }
#'
#' @export
plot_gpg_q3 <- function(data) {
...
}
#' Plot Gender Pay Gap for Fourth Quartile Countries
#'
#' Visualizes the Gender Pay Gap (GPG) for countries in the fourth quartile (Q4) based on their GPG.
#'
#' @param data A data frame containing the required metrics for GPG computation.
#'
#' @return A ggplot2 object visualizing the GPG for Q4 countries.
#' @importFrom ggplot2 ggplot aes geom_bar coord_flip labs theme_minimal
#'
#' @examples
#' \dontrun{
#' data(real_data_GPG) # Load example dataset
#' plot_gpg_q4(real_data_GPG)
#' }
#'
#' @export
plot_gpg_q4 <- function(data) {
...
}
library(ggplot2)
plot_gpg <- function(data) {
# Check if gpg column exists
if(!"gpg" %in% names(data)) {
data <- gender_pay_gap(data)
}
# Remove NA values if any
data <- data[!is.na(data$gpg), ]
# Sort the data based on the gpg values
data <- data[order(data$gpg, decreasing = TRUE), ]
# Select the top 5 countries
top5 <- utils::head(data, 5)
ggplot(top5, aes(x=stats::reorder(.data$country, -.data$gpg), y=.data$gpg)) +
geom_bar(stat="identity", fill="steelblue") +
coord_flip() +
labs(title="Top 5 Countries with Highest Gender Pay Gap",
x="Country", y="Gender Pay Gap (%)") +
theme_minimal()
}
plot_gpg <- function(data) {
# Check if gpg column exists
if(!"gpg" %in% names(data)) {
data <- gender_pay_gap(data)
}
# Remove NA values if any
data <- data[!is.na(data$gpg), ]
# Sort the data based on the gpg values
data <- data[order(data$gpg, decreasing = TRUE), ]
# Select the top 5 countries
top5 <- utils::head(data, 5)
ggplot(top5, aes(x=stats::reorder(.data$country, -.data$gpg), y=.data$gpg)) +
geom_bar(stat="identity", fill="steelblue") +
coord_flip() +
labs(title="Top 5 Countries with Highest Gender Pay Gap",
x="Country", y="Gender Pay Gap (%)") +
theme_minimal()
}
# Helper function to get the data subset for a specific quartile
get_quartile_data <- function(data, quartile) {
n <- nrow(data)
if (quartile == 1) {
return(data[1:(n/4),])
} else if (quartile == 2) {
return(data[(n/4 + 1):(n/2),])
} else if (quartile == 3) {
return(data[(n/2 + 1):(3*n/4),])
} else if (quartile == 4) {
return(data[(3*n/4 + 1):n,])
} else {
stop("Invalid quartile specified!")
}
}
# Now, for each of the quartile plotting functions, you need to make similar changes:
# Example for plot_gpg_q1
plot_gpg_q1 <- function(data) {
if(!"gpg" %in% names(data)) {
data <- gender_pay_gap(data)
}
data <- data[!is.na(data$gpg), ]
data <- data[order(data$gpg, decreasing = TRUE), ]
q1_data <- get_quartile_data(data, 1)
ggplot(q1_data, aes(x=stats::reorder(.data$country, -.data$gpg), y=.data$gpg)) +
geom_bar(stat="identity", fill="steelblue") +
coord_flip() +
labs(title="Countries in 1st Quartile of Gender Pay Gap",
x="Country", y="Gender Pay Gap (%)") +
theme_minimal()
}
# Make similar changes for plot_gpg_q2, plot_gpg_q3, and plot_gpg_q4
# Load the dataset
data("real_data_GPG")
# Calculate and print the gender pay gap
gpg_results <- gender_pay_gap(real_data_GPG)
print(gpg_results)
# Plot the top 5 countries based on gender pay gap
plot_gpg(real_data_GPG)
plot_gpg_q2(real_data_GPG)
plot_gpg_q2(real_data_GPG)
# Helper function to get the data subset for a specific quartile
get_quartile_data <- function(data, quartile) {
n <- nrow(data)
if (quartile == 1) {
return(data[1:(n/4),])
} else if (quartile == 2) {
return(data[(n/4 + 1):(n/2),])
} else if (quartile == 3) {
return(data[(n/2 + 1):(3*n/4),])
} else if (quartile == 4) {
return(data[(3*n/4 + 1):n,])
} else {
stop("Invalid quartile specified!")
}
}
# Now, for each of the quartile plotting functions, you need to make similar changes:
# Example for plot_gpg_q1
plot_gpg_q1 <- function(data) {
if(!"gpg" %in% names(data)) {
data <- gender_pay_gap(data)
}
data <- data[!is.na(data$gpg), ]
data <- data[order(data$gpg, decreasing = TRUE), ]
q1_data <- get_quartile_data(data, 1)
ggplot(q1_data, aes(x=stats::reorder(.data$country, -.data$gpg), y=.data$gpg)) +
geom_bar(stat="identity", fill="steelblue") +
coord_flip() +
labs(title="Countries in 1st Quartile of Gender Pay Gap",
x="Country", y="Gender Pay Gap (%)") +
theme_minimal()
}
plot_gpg_q1(real_data_GPG)
library(ggplot2)
plot_gpg <- function(data) {
# Check if gpg column exists
if(!"gpg" %in% names(data)) {
data <- gender_pay_gap(data)
}
# Remove NA values if any
data <- data[!is.na(data$gpg), ]
# Sort the data based on the gpg values
data <- data[order(data$gpg, decreasing = TRUE), ]
# Select the top 5 countries
top5 <- utils::head(data, 5)
ggplot(top5, aes(x=stats::reorder(.data$country, -.data$gpg), y=.data$gpg)) +
geom_bar(stat="identity", fill="steelblue") +
coord_flip() +
labs(title="Top 5 Countries with Highest Gender Pay Gap",
x="Country", y="Gender Pay Gap (%)") +
theme_minimal()
}
# Helper function to get the data subset for a specific quartile
get_quartile_data <- function(data, quartile) {
n <- nrow(data)
if (quartile == 1) {
return(data[1:(n/4),])
} else if (quartile == 2) {
return(data[(n/4 + 1):(n/2),])
} else if (quartile == 3) {
return(data[(n/2 + 1):(3*n/4),])
} else if (quartile == 4) {
return(data[(3*n/4 + 1):n,])
} else {
stop("Invalid quartile specified!")
}
}
# Example for plot_gpg_q1
plot_gpg_q1 <- function(data) {
if(!"gpg" %in% names(data)) {
data <- gender_pay_gap(data)
}
data <- data[!is.na(data$gpg), ]
data <- data[order(data$gpg, decreasing = TRUE), ]
q1_data <- get_quartile_data(data, 1)
ggplot(q1_data, aes(x=stats::reorder(.data$country, -.data$gpg), y=.data$gpg)) +
geom_bar(stat="identity", fill="steelblue") +
coord_flip() +
labs(title="Countries in 1st Quartile of Gender Pay Gap",
x="Country", y="Gender Pay Gap (%)") +
theme_minimal()
}
# Plot the top 5 countries based on gender pay gap
plot_gpg(real_data_GPG)
plot_gpg_q1(real_data_GPG)
# Plot function for the second quartile
plot_gpg_q2 <- function(data) {
if(!"gpg" %in% names(data)) {
data <- gender_pay_gap(data)
}
data <- data[!is.na(data$gpg), ]
data <- data[order(data$gpg, decreasing = TRUE), ]
q2_data <- get_quartile_data(data, 2)
ggplot(q2_data, aes(x=stats::reorder(.data$country, -.data$gpg), y=.data$gpg)) +
geom_bar(stat="identity", fill="steelblue") +
coord_flip() +
labs(title="Countries in 2nd Quartile of Gender Pay Gap",
x="Country", y="Gender Pay Gap (%)") +
theme_minimal()
}
# Plot function for the third quartile
plot_gpg_q3 <- function(data) {
if(!"gpg" %in% names(data)) {
data <- gender_pay_gap(data)
}
data <- data[!is.na(data$gpg), ]
data <- data[order(data$gpg, decreasing = TRUE), ]
q3_data <- get_quartile_data(data, 3)
ggplot(q3_data, aes(x=stats::reorder(.data$country, -.data$gpg), y=.data$gpg)) +
geom_bar(stat="identity", fill="steelblue") +
coord_flip() +
labs(title="Countries in 3rd Quartile of Gender Pay Gap",
x="Country", y="Gender Pay Gap (%)") +
theme_minimal()
}
# Plot function for the fourth quartile
plot_gpg_q4 <- function(data) {
if(!"gpg" %in% names(data)) {
data <- gender_pay_gap(data)
}
data <- data[!is.na(data$gpg), ]
data <- data[order(data$gpg, decreasing = TRUE), ]
q4_data <- get_quartile_data(data, 4)
ggplot(q4_data, aes(x=stats::reorder(.data$country, -.data$gpg), y=.data$gpg)) +
geom_bar(stat="identity", fill="steelblue") +
coord_flip() +
labs(title="Countries in 4th Quartile of Gender Pay Gap",
x="Country", y="Gender Pay Gap (%)") +
theme_minimal()
}
plot_gpg_q2(real_data_GPG)
plot_gpg_q3(real_data_GPG)
plot_gpg_q4(real_data_GPG)
devtools::document()
##########################################################
##########################################################
gender_pay_gap <- function(data) {
# Check input data for required columns
if (!all(c("female_income", "male_income") %in% colnames(data))) {
stop("The input data must contain 'female_income' and 'male_income' columns.")
}
# Calculate the gender pay gap for each country
data$gpg <- ((data$male_income - data$female_income) / data$male_income) * 100
# Return the results
return(data[, c("country", "gpg")])
}
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
R.version()
R.Version()$version.string
devtools::document()
install.packages("knitr")
install.packages("knitr")
install.packages("rmarkdown")
dir.create("vignettes")
devtools::build_vignettes()
# Load the required libraries and data
library(genderstat)
# Load the required data
data(real_data_GDI)
# Compute the GDI
gdi_results <- gender_development_index(real_data_GDI)
load("~/GitHub/genderstat/genderstat/data/real_data_GDI.RData")
data("real_data_GDI")
load("~/GitHub/genderstat/genderstat/data/real_data_GDI.RData")
load("~/GitHub/genderstat/genderstat/data/real_data_GEM.RData")
#' Gender Development Index (GDI)
#'
#' Computes the Gender Development Index (GDI) based on the given dataset.
#'
#' @param data A data frame containing the required metrics for GDI computation.
#'
#' @return A numeric vector representing the GDI values.
#'
#'
#' @examples
#'
#' data(real_data_GDI) # Load example dataset
#' gdi_results <- gender_development_index(real_data_GDI)
#' print(gdi_results)
#'
#'
#' @export
gender_development_index <- function(data) {
...
}
#' Original Data of GDI (GDI)
#'
#' A dataset containing observed values for the GDI analysis.
#'
#' @format A data frame with 191 rows and 7 columns:
#' \describe{
#'   \item{country}{A character vector representing the name of the country.}
#'   \item{female_life_expectancy}{A numeric vector representing the life expectancy of females in the respective country. Measured in years.}
#'   \item{male_life_expectancy}{A numeric vector representing the life expectancy of males in the respective country. Measured in years.}
#'   \item{female_mean_schooling}{A numeric vector representing the average number of schooling years for females in the respective country.}
#'   \item{male_mean_schooling}{A numeric vector representing the average number of schooling years for males in the respective country.}
#'   \item{female_gni_per_capita}{A numeric vector representing the Gross National Income per capita for females in the respective country. Measured in international dollars.}
#'   \item{male_gni_per_capita}{A numeric vector representing the Gross National Income per capita for males in the respective country. Measured in international dollars.}
#' }
#' @source Data obtained from the following sources:
#' \itemize{
#'   \item{\href{https://hdr.undp.org/data-center/documentation-and-downloads}{UNDP Human Development Reports Data Center}}
#'   \item{\href{https://genderdata.worldbank.org/indicators/}{World Bank Gender Data Portal}}
#' }
#' @name real_data_GDI
#' @docType data
#' @usage data(real_data_GDI)
NULL
###########################################################
gender_development_index <- function(data) {
# Check input data for required columns
required_columns <- c("female_life_expectancy", "male_life_expectancy",
"female_mean_schooling", "male_mean_schooling",
"female_gni_per_capita", "male_gni_per_capita")
if (!all(required_columns %in% colnames(data))) {
stop("The input data must contain the required columns for GDI calculation.")
}
# Calculate HDI components for each gender
female_health <- data$female_life_expectancy / 85
male_health <- data$male_life_expectancy / 85
female_education <- data$female_mean_schooling / 15
male_education <- data$male_mean_schooling / 15
female_standard_of_living <- log(data$female_gni_per_capita) / log(75000)
male_standard_of_living <- log(data$male_gni_per_capita) / log(75000)
# Calculate HDI for each gender
female_hdi <- (female_health * female_education * female_standard_of_living)^(1/3)
male_hdi <- (male_health * male_education * male_standard_of_living)^(1/3)
# Calculate GDI
GDI <- female_hdi / (female_hdi + male_hdi)
# Create a data frame with required columns for plotting
result_data <- data.frame(
country = data$country,
GDI = GDI,
female_hdi = female_hdi,
male_hdi = male_hdi
)
return(result_data)
}
#' Gender Empowerment Measure (GEM)
#'
#' Computes the Gender Empowerment Measure (GEM) based on the provided dataset.
#'
#' @param data A data frame containing the required metrics for GEM computation.
#'
#' @return A numeric vector representing the GEM values.
#'
#' @examples
#'
#' data(real_data_GEM) # Load example dataset
#' gem_results <- gender_empowerment_measure(real_data_GEM)
#' print(gem_results)
#'
#' @export
gender_empowerment_measure <- function(data) {
...
}
#' Original Data for Gender Empowerment Measure (GEM)
#'
#' A dataset containing observed values for the GEM analysis.
#'
#' @format A data frame with 191 rows and 4 columns:
#' \describe{
#'   \item{country}{A character vector representing the name of the country.}
#'   \item{female_parliament_seats}{A numeric vector representing the ratio of parliamentary seats occupied by females in the respective country. Measured as a proportion (0-1).}
#'   \item{female_professional_positions}{A numeric vector representing the ratio of professional and technical job roles occupied by females in the respective country. Measured as a proportion (0-1).}
#'   \item{female_to_male_earned_income_ratio}{A numeric vector representing the income ratio for females in the respective country in comparison to males. Measured as a proportion (0-1), where 1 indicates equal income with males.}
#' }
#' @source Data obtained from the following sources:
#' \itemize{
#'   \item{\href{https://hdr.undp.org/data-center/documentation-and-downloads}{UNDP Human Development Reports Data Center}}
#'   \item{\href{https://genderdata.worldbank.org/indicators/}{World Bank Gender Data Portal}}
#' }
#' @name real_data_GEM
#' @docType data
#' @usage data(real_data_GEM)
NULL
#################################################################################
gender_empowerment_measure <- function(data) {
# Check input data for required columns
required_columns <- c("female_parliament_seats", "female_professional_positions", "female_to_male_earned_income_ratio")
if (!all(required_columns %in% colnames(data))) {
stop("The input data must contain the required columns for GEM calculation.")
}
# Normalize the input values (0-1 range)
data$female_parliament_seats <- data$female_parliament_seats / 100
data$female_professional_positions <- data$female_professional_positions / 100
data$female_to_male_earned_income_ratio <- data$female_to_male_earned_income_ratio / 100
# Calculate GEM
GEM <- (data$female_parliament_seats +
data$female_professional_positions +
data$female_to_male_earned_income_ratio) / 3
return(GEM)
}
# Load the required libraries and data
data(real_data_GEM)
# Compute the GEM
gem_results <- gender_empowerment_measure(real_data_GEM)
print(gem_results)
# Load the required data
data(real_data_GDI)
# Compute the GDI
gdi_results <- gender_development_index(real_data_GDI)
print(gdi_results)
View(gdi_results)
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes()
gender_pay_gap(real_data_GPG)
devtools::build_vignettes()
devtools::build_vignettes()
plot_hdi(real_data_GDI)
plot_hdi(real_data_GDI)
plot_gem(real_data_GDI)
plot_gem(real_data_GEM)
plot_gii_education(real_data_GII)
plot_gii(real_data_GII)
plot_gpg(real_data_GPG)
devtools::build_vignettes()
plot_gem(real_data_GEM)
plot_gii(real_data_GII)
plot_gii_health(real_data_GII)
plot_gii_empowerment(real_data_GII)
plot_gii_labor(real_data_GII)
gender_inequality_index(real_data_GII)
devtools::build_vignettes()
devtools::document()
install.packages("usethis")
usethis::edit_r_environ()
devtools::check()
check --as-cran
devtools::check(args = "--as-cran")
demo()
help()
shiny::runApp('genderstat-webapp')
library(genderstat)
shiny::runApp()
citation()
devtools::document()
