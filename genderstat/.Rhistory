install.packages(c("devtools", "roxygen2", "testthat", "usethis"))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
devtools::install_github("mashrur-ayon/genderstat")
source("~/GitHub/genderstat/genderstat/R/gender_pay_gap.R", echo=TRUE)
source("~/GitHub/genderstat/genderstat/R/gender_pay_gap.R", echo=TRUE)
source("~/GitHub/genderstat/genderstat/R/gender_pay_gap.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# Set the seed for reproducibility
set.seed(123)
# Generate simulated data
simulated_data_GEM <- data.frame(
country = paste("Country", 1:100), # 100 hypothetical countries
parliament_seat_ratio = runif(100, 0, 1), # Random ratios of females to males in parliament seats between 0 and 1
managerial_position_ratio = runif(100, 0, 1), # Random ratios of females to males in managerial positions between 0 and 1
income_ratio = runif(100, 0, 1) # Random ratios of females to males in income between 0 and 1
)
#' Calculate the Gender Empowerment Measure (GEM)
#'
#' This function calculates the Gender Empowerment Measure (GEM) using a data frame containing information on the proportion of seats in parliament held by women, the percentage of women in professional and technical positions, and the ratio of estimated female-to-male earned income.
#' @param data A data frame containing the following columns: 'female_parliament_seats', 'female_professional_positions', 'female_to_male_earned_income_ratio'
#' @return The Gender Empowerment Measure (GEM) as a numeric value
#' @export
#' @examples
#' # Load a sample dataset containing GEM component data
#' data("sample_gem_data")
#' # Calculate the Gender Empowerment Measure
#' gender_empowerment_measure(sample_gem_data)
gender_empowerment_measure <- function(data) {
# Check input data for required columns
required_columns <- c("female_parliament_seats", "female_professional_positions", "female_to_male_earned_income_ratio")
if (!all(required_columns %in% colnames(data))) {
stop("The input data must contain the required columns for GEM calculation.")
}
# Normalize the input values (0-1 range)
normalized_data <- data / 100
# Calculate GEM
GEM <- (normalized_data$female_parliament_seats +
normalized_data$female_professional_positions +
normalized_data$female_to_male_earned_income_ratio) / 3
return(GEM)
}
# View the first few rows of the data frame
head(simulated_data_GEM)
# Test the GEM function
GEM(simulated_data_GEM)
#' Calculate the Gender Empowerment Measure (GEM)
#'
#' This function calculates the Gender Empowerment Measure (GEM) using a data frame containing information on the proportion of seats in parliament held by women, the percentage of women in professional and technical positions, and the ratio of estimated female-to-male earned income.
#' @param data A data frame containing the following columns: 'female_parliament_seats', 'female_professional_positions', 'female_to_male_earned_income_ratio'
#' @return The Gender Empowerment Measure (GEM) as a numeric value
#' @export
#' @examples
#' # Load a sample dataset containing GEM component data
#' data("sample_gem_data")
#' # Calculate the Gender Empowerment Measure
#' gender_empowerment_measure(sample_gem_data)
gender_empowerment_measure <- function(data) {
# Check input data for required columns
required_columns <- c("female_parliament_seats", "female_professional_positions", "female_to_male_earned_income_ratio")
if (!all(required_columns %in% colnames(data))) {
stop("The input data must contain the required columns for GEM calculation.")
}
# Normalize the input values (0-1 range)
normalized_data <- data / 100
# Calculate GEM
GEM<- (normalized_data$female_parliament_seats +
normalized_data$female_professional_positions +
normalized_data$female_to_male_earned_income_ratio) / 3
return(GEM)
}
# Test the GEM function
GEM(simulated_data_GEM)
# Set the seed for reproducibility
set.seed(123)
# Generate simulated data
simulated_data_OS <- data.frame(
occupation = paste("Occupation", 1:50), # 50 different occupations
number_of_males = sample(1:500, 50, replace = TRUE), # Random number of males between 1 and 500 in each occupation
number_of_females = sample(1:500, 50, replace = TRUE) # Random number of females between 1 and 500 in each occupation
)
# View the first few rows of the data frame
head(simulated_data_OS)
# Load your package
library(genderstat)
# Set the seed for reproducibility
set.seed(123)
# Generate simulated data
simulated_data_OS <- data.frame(
occupation = paste("Occupation", 1:50), # 50 different occupations
number_of_males = sample(1:500, 50, replace = TRUE), # Random number of males between 1 and 500 in each occupation
number_of_females = sample(1:500, 50, replace = TRUE) # Random number of females between 1 and 500 in each occupation
)
# View the first few rows of the data frame
head(simulated_data_OS)
# Test the Occupational Segregation function
occupational_segregation(simulated_data_OS)
# Set the seed for reproducibility
set.seed(123)
# Generate simulated data
simulated_data_OS <- data.frame(
occupation = paste("Occupation", 1:50), # 50 different occupations
number_of_males = sample(1:500, 50, replace = TRUE), # Random number of males between 1 and 500 in each occupation
number_of_females = sample(1:500, 50, replace = TRUE) # Random number of females between 1 and 500 in each occupation
)
# Set the seed for reproducibility
set.seed(123)
# Generate simulated data
simulated_data_OS <- data.frame(
occupation = paste("Occupation", 1:50), # 50 different occupations
number_of_males = sample(1:500, 50, replace = TRUE), # Random number of males between 1 and 500 in each occupation
number_of_females = sample(1:500, 50, replace = TRUE) # Random number of females between 1 and 500 in each occupation
)
#' Calculate Occupational Segregation
#'
#' This function calculates the occupational segregation index using a data frame containing the number of men and women in each occupational category.
#' @param data A data frame containing at least three columns: 'occupation' (factor or character), 'male_count' (numeric), and 'female_count' (numeric)
#' @return The occupational segregation index as a numeric value
#' @export
#' @examples
#' # Load a sample dataset containing occupational data
#' data("sample_occupational_data")
#' # Calculate the Occupational Segregation Index
#' occupational_segregation(sample_occupational_data)
occupational_segregation <- function(data) {
# Check input data for required columns
if (!all(c("occupation", "male_count", "female_count") %in% colnames(data))) {
stop("The input data must contain 'occupation', 'male_count', and 'female_count' columns.")
}
# Calculate the proportion of men and women in each occupation
data$male_prop <- data$male_count / (data$male_count + data$female_count)
data$female_prop <- data$female_count / (data$male_count + data$female_count)
# Calculate the index of dissimilarity (D)
D <- 0.5 * sum(abs(data$male_prop - data$female_prop))
return(D)
}
# View the first few rows of the data frame
head(simulated_data_OS)
# Test the Occupational Segregation function
occupational_segregation(simulated_data_OS)
# Set the seed for reproducibility
set.seed(123)
# Generate simulated data
simulated_data_OS <- data.frame(
occupation = paste("Occupation", 1:50), # 50 different occupations
male_count = sample(1:500, 50, replace = TRUE), # Random number of males between 1 and 500 in each occupation
female_count = sample(1:500, 50, replace = TRUE) # Random number of females between 1 and 500 in each occupation
)
# Test the Occupational Segregation function
occupational_segregation(simulated_data_OS)
