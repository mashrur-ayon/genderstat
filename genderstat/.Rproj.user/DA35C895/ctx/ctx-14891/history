#' }
#' @source The dataset is simulated for the purpose of this package.
#' @name simulated_data_TUA
#' @docType data
#' @usage data(simulated_data_TUA)
NULL
###################################
# Set the seed for reproducibility
set.seed(123)
##########################
# Generate simulated data for Time-use Analysis
##########################
##################################
simulated_data_TUA <- data.frame(
person = 1:200, # 200 hypothetical people
# Gender assignment
gender = sample(c("Male", "Female"), 200, replace = TRUE),
# Hours spent on unpaid work (generally ranges between 0 to 24 hours for this simulation)
unpaid_work_hours = runif(200, 0, 24),
# Hours spent on paid work (generally ranges between 0 to 24 hours for this simulation)
paid_work_hours = runif(200, 0, 24)
)
################################################################################
# View the first few rows of the data frame
head(simulated_data_TUA)
save(simulated_data_TUA, file="data/time_use_analysis.RData")
# Test the Time-use Analysis function
#time_use_analysis(simulated_data_TUA)
devtools::document()
#' Gender Development Index (GDI)
#'
#' Computes the Gender Development Index (GDI) based on the given dataset.
#'
#' @param data A data frame containing the required metrics for GDI computation.
#'
#' @return A numeric vector representing the GDI values.
#'
#' @examples
#' \dontrun{
#' data(gender_development_index_data) # Load example dataset
#' gdi_results <- gender_development_index(gender_development_index_data)
#' print(gdi_results)
#' }
#'
#' @export
gender_development_index <- function(data) {
...
}
##' Simulated Data for Gender Development Index (GDI)
#'
#' A dataset containing simulated values for the GDI analysis.
#'
#' @format A data frame with 200 rows and 7 columns:
#' \describe{
#'   \item{country}{A character vector representing the name of the country.}
#'   \item{female_life_expectancy}{A numeric vector representing the life expectancy of females in the respective country. Measured in years.}
#'   \item{male_life_expectancy}{A numeric vector representing the life expectancy of males in the respective country. Measured in years.}
#'   \item{female_mean_schooling}{A numeric vector representing the average number of schooling years for females in the respective country.}
#'   \item{male_mean_schooling}{A numeric vector representing the average number of schooling years for males in the respective country.}
#'   \item{female_gni_per_capita}{A numeric vector representing the Gross National Income per capita for females in the respective country. Measured in international dollars.}
#'   \item{male_gni_per_capita}{A numeric vector representing the Gross National Income per capita for males in the respective country. Measured in international dollars.}
#' }
#' @source The dataset is simulated for the purpose of this package.
#' @name simulated_data_GDI
#' @docType data
#' @usage data(simulated_data_GDI)
NULL
###########################################################
gender_development_index <- function(data) {
# Check input data for required columns
required_columns <- c("female_life_expectancy", "male_life_expectancy",
"female_mean_schooling", "male_mean_schooling",
"female_gni_per_capita", "male_gni_per_capita")
if (!all(required_columns %in% colnames(data))) {
stop("The input data must contain the required columns for GDI calculation.")
}
# Calculate HDI components for each gender
female_health <- data$female_life_expectancy / 85
male_health <- data$male_life_expectancy / 85
female_education <- data$female_mean_schooling / 15
male_education <- data$male_mean_schooling / 15
female_standard_of_living <- log(data$female_gni_per_capita) / log(75000)
male_standard_of_living <- log(data$male_gni_per_capita) / log(75000)
# Calculate HDI for each gender
female_hdi <- (female_health * female_education * female_standard_of_living)^(1/3)
male_hdi <- (male_health * male_education * male_standard_of_living)^(1/3)
# Calculate GDI
GDI <- female_hdi / (female_hdi + male_hdi)
return(GDI)
}
#' Gender Empowerment Measure (GEM)
#'
#' Computes the Gender Empowerment Measure (GEM) based on the provided dataset.
#'
#' @param data A data frame containing the required metrics for GEM computation.
#'
#' @return A numeric vector representing the GEM values.
#'
#' @examples
#' \dontrun{
#' data(gender_empowerment_measure_data) # Load example dataset
#' gem_results <- gender_empowerment_measure(gender_empowerment_measure_data)
#' print(gem_results)
#' }
#'
#' @export
gender_empowerment_measure <- function(data) {
...
}
#' Simulated Data for Gender Empowerment Measure (GEM)
#'
#' A dataset containing simulated values for the GEM analysis.
#'
#' @format A data frame with 200 rows and 4 columns:
#' \describe{
#'   \item{country}{A character vector representing the name of the country.}
#'   \item{female_parliament_seats_ratio}{A numeric vector representing the ratio of parliamentary seats occupied by females in the respective country. Measured as a proportion (0-1).}
#'   \item{female_professional_technical_workers_ratio}{A numeric vector representing the ratio of professional and technical job roles occupied by females in the respective country. Measured as a proportion (0-1).}
#'   \item{female_income_ratio}{A numeric vector representing the income ratio for females in the respective country in comparison to males. Measured as a proportion (0-1), where 1 indicates equal income with males.}
#' }
#' @source The dataset is simulated for the purpose of this package.
#' @name simulated_data_GEM
#' @docType data
#' @usage data(simulated_data_GEM)
NULL
#################################################################################
gender_empowerment_measure <- function(data) {
# Check input data for required columns
required_columns <- c("female_parliament_seats", "female_professional_positions", "female_to_male_earned_income_ratio")
if (!all(required_columns %in% colnames(data))) {
stop("The input data must contain the required columns for GEM calculation.")
}
# Normalize the input values (0-1 range)
data$female_parliament_seats <- data$female_parliament_seats / 100
data$female_professional_positions <- data$female_professional_positions / 100
data$female_to_male_earned_income_ratio <- data$female_to_male_earned_income_ratio / 100
# Calculate GEM
GEM <- (data$female_parliament_seats +
data$female_professional_positions +
data$female_to_male_earned_income_ratio) / 3
return(GEM)
}
##' Gender Inequality Index (GII)
#'
#' Computes the Gender Inequality Index (GII) based on the provided dataset.
#'
#' @param data A data frame containing the required metrics for GII computation.
#'
#' @return A numeric vector representing the GII values.
#'
#' @examples
#' \dontrun{
#' data(gender_inequality_index_data) # Load example dataset
#' gii_results <- gender_inequality_index(gender_inequality_index_data)
#' print(gii_results)
#' }
#'
#' @export
gender_inequality_index <- function(data) {
...
}
#' Simulated Data for Gender Inequality Index (GII)
#'
#' A dataset containing simulated values for the GII analysis.
#'
#' @format A data frame with 200 rows and 6 columns:
#' \describe{
#'   \item{country}{A character vector representing the name of the country.}
#'   \item{female_reproductive_age}{A numeric vector representing the reproductive age for females in the respective country.}
#'   \item{male_reproductive_age}{A numeric vector representing the reproductive age for males in the respective country.}
#'   \item{female_secondary_education}{A numeric vector representing the secondary education completion rate for females in the respective country. Measured as a proportion (0-1).}
#'   \item{male_secondary_education}{A numeric vector representing the secondary education completion rate for males in the respective country. Measured as a proportion (0-1).}
#'   \item{female_labor_force}{A numeric vector representing the labor force participation rate for females in the respective country. Measured as a proportion (0-1).}
#' }
#' @source The dataset is simulated for the purpose of this package.
#' @name simulated_data_GII
#' @docType data
#' @usage data(simulated_data_GII)
NULL
############################################################################
gender_inequality_index <- function(data) {
# Check input data for required columns
required_columns <- c("maternal_mortality_ratio", "adolescent_birth_rate",
"female_parliament_seats", "female_secondary_education",
"male_secondary_education", "female_labor_force", "male_labor_force")
if (!all(required_columns %in% colnames(data))) {
stop("The input data must contain the required columns for GII calculation.")
}
# Calculate GII components
H <- data$maternal_mortality_ratio / (data$maternal_mortality_ratio + data$adolescent_birth_rate)
E <- data$female_parliament_seats * data$female_secondary_education / (data$female_secondary_education + data$male_secondary_education)
L <- data$female_labor_force / (data$female_labor_force + data$male_labor_force)
# Calculate GII
GII <- 1 - (H * E * L)^(1/3)
return(GII)
}
#' Gender Pay Gap (GPG)
#'
#' Computes the Gender Pay Gap (GPG) based on the provided dataset.
#'
#' @param data A data frame containing the required metrics for GPG computation.
#'
#' @return A numeric vector representing the GPG values.
#'
#' @examples
#' \dontrun{
#' data(gender_pay_gap_data) # Load example dataset
#' gpg_results <- gender_pay_gap(gender_pay_gap_data)
#' print(gpg_results)
#' }
#'
#' @export
gender_pay_gap <- function(data) {
...
}
#' Simulated Data for Gender Pay Gap (GPG)
#'
#' A dataset containing simulated values for the GPG analysis.
#'
#' @format A data frame with 200 rows and 3 columns:
#' \describe{
#'   \item{country}{A character vector representing the name of the country.}
#'   \item{female_salary}{A numeric vector representing the average salary of females in the respective country. Measured in international dollars.}
#'   \item{male_salary}{A numeric vector representing the average salary of males in the respective country. Measured in international dollars.}
#' }
#' @source The dataset is simulated for the purpose of this package.
#' @name simulated_data_GPG
#' @docType data
#' @usage data(simulated_data_GPG)
NULL
##########################################################
##########################################################
gender_pay_gap <- function(data) {
# Check input data for required columns
if (!all(c("salary", "gender") %in% colnames(data))) {
stop("The input data must contain 'salary' and 'gender' columns.")
}
# Calculate the average salary for each gender
avg_salaries <- aggregate(salary ~ gender, data, mean)
# Calculate the gender pay gap
gpg <- (avg_salaries$salary[avg_salaries$gender == "male"] -
avg_salaries$salary[avg_salaries$gender == "female"]) /
avg_salaries$salary[avg_salaries$gender == "male"] * 100
return(gpg)
}
#' Occupational Segregation Indices
#'
#' Computes the Occupational Segregation Indices based on the provided dataset.
#'
#' @param data A data frame containing the required metrics for occupational segregation computation.
#'
#' @return A numeric vector representing the Occupational Segregation Indices.
#'
#' @examples
#' \dontrun{
#' data(occupational_segregation_data) # Load example dataset
#' os_results <- occupational_segregation(occupational_segregation_data)
#' print(os_results)
#' }
#'
#' @export
occupational_segregation <- function(data) {
...
}
#' Simulated Data for Occupational Segregation
#'
#' A dataset containing simulated values for Occupational Segregation analysis.
#'
#' @format A data frame with 200 rows and 3 columns:
#' \describe{
#'   \item{country}{A character vector representing the name of the country.}
#'   \item{female_occupation}{A character vector representing the most common occupation for females in the respective country.}
#'   \item{male_occupation}{A character vector representing the most common occupation for males in the respective country.}
#' }
#' @source The dataset is simulated for the purpose of this package.
#' @name simulated_data_OS
#' @docType data
#' @usage data(simulated_data_OS)
NULL
###############################################################################
occupational_segregation <- function(data) {
# Check input data for required columns
if (!all(c("occupation", "male_count", "female_count") %in% colnames(data))) {
stop("The input data must contain 'occupation', 'male_count', and 'female_count' columns.")
}
# Calculate the proportion of men and women in each occupation
data$male_prop <- data$male_count / (data$male_count + data$female_count)
data$female_prop <- data$female_count / (data$male_count + data$female_count)
# Calculate the index of dissimilarity (D)
D <- 0.5 * sum(abs(data$male_prop - data$female_prop))
return(D)
}
#' Time-use Analysis Metrics
#'
#' Computes the Time-use Analysis Metrics based on the provided dataset.
#'
#' @param data A data frame containing the required metrics for time-use analysis.
#'
#' @return A numeric vector representing the Time-use Analysis Metrics.
#'
#' @examples
#' \dontrun{
#' data(time_use_analysis_data) # Load example dataset
#' tua_results <- time_use_analysis(time_use_analysis_data)
#' print(tua_results)
#' }
#'
#' @export
time_use_analysis <- function(data) {
...
}
#' Simulated Data for Time-use Analysis
#'
#' A dataset containing simulated values for Time-use Analysis.
#'
#' @format A data frame with 200 rows and 4 columns:
#' \describe{
#'   \item{country}{A character vector representing the name of the country.}
#'   \item{female_leisure_time}{A numeric vector representing the average leisure time in hours per day for females in the respective country.}
#'   \item{male_leisure_time}{A numeric vector representing the average leisure time in hours per day for males in the respective country.}
#'   \item{gender_time_difference}{A numeric vector representing the difference in leisure time between genders in the respective country.}
#' }
#' @source The dataset is simulated for the purpose of this package.
#' @name simulated_data_TUA
#' @docType data
#' @usage data(simulated_data_TUA)
NULL
################################################################################
time_use_analysis <- function(data) {
# Check input data for required columns
if (!all(c("gender", "unpaid_work_hours", "paid_work_hours") %in% colnames(data))) {
stop("The input data must contain 'gender', 'unpaid_work_hours', and 'paid_work_hours' columns.")
}
# Calculate the average time spent on unpaid and paid work for each gender
avg_time_use <- aggregate(cbind(unpaid_work_hours, paid_work_hours) ~ gender, data, mean)
return(avg_time_use)
}
devtools::document()
devtools::document()
#' Gender Development Index (GDI)
#'
#' Computes the Gender Development Index (GDI) based on the given dataset.
#'
#' @param data A data frame containing the required metrics for GDI computation.
#'
#' @return A numeric vector representing the GDI values.
#'
#' @examples
#' \dontrun{
#' data(gender_development_index_data) # Load example dataset
#' gdi_results <- gender_development_index(gender_development_index_data)
#' print(gdi_results)
#' }
#'
#' @export
gender_development_index <- function(data) {
...
}
###########################################################
gender_development_index <- function(data) {
# Check input data for required columns
required_columns <- c("female_life_expectancy", "male_life_expectancy",
"female_mean_schooling", "male_mean_schooling",
"female_gni_per_capita", "male_gni_per_capita")
if (!all(required_columns %in% colnames(data))) {
stop("The input data must contain the required columns for GDI calculation.")
}
# Calculate HDI components for each gender
female_health <- data$female_life_expectancy / 85
male_health <- data$male_life_expectancy / 85
female_education <- data$female_mean_schooling / 15
male_education <- data$male_mean_schooling / 15
female_standard_of_living <- log(data$female_gni_per_capita) / log(75000)
male_standard_of_living <- log(data$male_gni_per_capita) / log(75000)
# Calculate HDI for each gender
female_hdi <- (female_health * female_education * female_standard_of_living)^(1/3)
male_hdi <- (male_health * male_education * male_standard_of_living)^(1/3)
# Calculate GDI
GDI <- female_hdi / (female_hdi + male_hdi)
return(GDI)
}
#' Simulated Data for Gender Development Index (GDI)
#'
#' A dataset containing simulated values for the GDI analysis.
#'
#' @format A data frame with 200 rows and 7 columns:
#' \describe{
#'   \item{country}{A character vector representing the name of the country.}
#'   \item{female_life_expectancy}{A numeric vector representing the life expectancy of females in the respective country. Measured in years.}
#'   \item{male_life_expectancy}{A numeric vector representing the life expectancy of males in the respective country. Measured in years.}
#'   \item{female_mean_schooling}{A numeric vector representing the average number of schooling years for females in the respective country.}
#'   \item{male_mean_schooling}{A numeric vector representing the average number of schooling years for males in the respective country.}
#'   \item{female_gni_per_capita}{A numeric vector representing the Gross National Income per capita for females in the respective country. Measured in international dollars.}
#'   \item{male_gni_per_capita}{A numeric vector representing the Gross National Income per capita for males in the respective country. Measured in international dollars.}
#' }
#' @source The dataset is simulated for the purpose of this package.
#' @name simulated_data_GDI
#' @docType data
#' @usage data(simulated_data_GDI)
NULL
###################################
# Set the seed for reproducibility
set.seed(123)
##########################
# Generate simulated data for GDI
##########################
##################################
simulated_data_GDI <- data.frame(
country = paste("Country", 1:200), # 200 hypothetical countries
# Life expectancy (generally ranges between 50 to 85 years)
female_life_expectancy = runif(200, 50, 85),
male_life_expectancy = runif(200, 50, 85),
# Mean years of schooling (generally ranges between 1 to 15 years)
female_mean_schooling = runif(200, 1, 15),
male_mean_schooling = runif(200, 1, 15),
# GNI per capita (generally ranges between 500 to 75000 USD for a broad representation)
female_gni_per_capita = runif(200, 500, 75000),
male_gni_per_capita = runif(200, 500, 75000)
)
# View the first few rows of the data frame
head(simulated_data_GDI)
save(simulated_data_GDI, file="data/gender_development_index.RData")
# Test the Gender Development Index function
#gender_development_index(simulated_data_GDI)
###########################################################
devtools::document()
devtools::document()
#' Gender Development Index (GDI)
#'
#' Computes the Gender Development Index (GDI) based on the given dataset.
#'
#' @param data A data frame containing the required metrics for GDI computation.
#'
#' @return A numeric vector representing the GDI values.
#'
#' @examples
#' \dontrun{
#' data(gender_development_index_data) # Load example dataset
#' gdi_results <- gender_development_index(gender_development_index_data)
#' print(gdi_results)
#' }
#'
#' @export
gender_development_index <- function(data) {
...
}
#' Simulated Data for Gender Development Index (GDI)
#'
#' A dataset containing simulated values for the GDI analysis.
#'
#' @format A data frame with 200 rows and 7 columns:
#' \describe{
#'   \item{country}{A character vector representing the name of the country.}
#'   \item{female_life_expectancy}{A numeric vector representing the life expectancy of females in the respective country. Measured in years.}
#'   \item{male_life_expectancy}{A numeric vector representing the life expectancy of males in the respective country. Measured in years.}
#'   \item{female_mean_schooling}{A numeric vector representing the average number of schooling years for females in the respective country.}
#'   \item{male_mean_schooling}{A numeric vector representing the average number of schooling years for males in the respective country.}
#'   \item{female_gni_per_capita}{A numeric vector representing the Gross National Income per capita for females in the respective country. Measured in international dollars.}
#'   \item{male_gni_per_capita}{A numeric vector representing the Gross National Income per capita for males in the respective country. Measured in international dollars.}
#' }
#' @source The dataset is simulated for the purpose of this package.
#' @name simulated_data_GDI
#' @docType data
#' @usage data(simulated_data_GDI)
NULL
###########################################################
gender_development_index <- function(data) {
# Check input data for required columns
required_columns <- c("female_life_expectancy", "male_life_expectancy",
"female_mean_schooling", "male_mean_schooling",
"female_gni_per_capita", "male_gni_per_capita")
if (!all(required_columns %in% colnames(data))) {
stop("The input data must contain the required columns for GDI calculation.")
}
# Calculate HDI components for each gender
female_health <- data$female_life_expectancy / 85
male_health <- data$male_life_expectancy / 85
female_education <- data$female_mean_schooling / 15
male_education <- data$male_mean_schooling / 15
female_standard_of_living <- log(data$female_gni_per_capita) / log(75000)
male_standard_of_living <- log(data$male_gni_per_capita) / log(75000)
# Calculate HDI for each gender
female_hdi <- (female_health * female_education * female_standard_of_living)^(1/3)
male_hdi <- (male_health * male_education * male_standard_of_living)^(1/3)
# Calculate GDI
GDI <- female_hdi / (female_hdi + male_hdi)
return(GDI)
}
devtools::document()
load("~/GitHub/genderstat/genderstat/data/gender_development_index.RData")
View(simulated_data_GDI)
load("~/GitHub/genderstat/genderstat/data/gender_empowerment_measure.RData")
View(simulated_data_GEM)
load("~/GitHub/genderstat/genderstat/data/gender_inequality_index.RData")
View(simulated_data_GII)
View(simulated_data_GDI)
View(simulated_data_GEM)
View(simulated_data_GII)
load("~/GitHub/genderstat/genderstat/data/gender_pay_gap.RData")
View(simulated_data_GII)
View(simulated_data_GPG)
load("~/GitHub/genderstat/genderstat/data/occupational_segregation.RData")
View(simulated_data_OS)
load("~/GitHub/genderstat/genderstat/data/time_use_analysis.RData")
View(simulated_data_TUA)
View(simulated_data_GDI)
View(simulated_data_GEM)
View(simulated_data_GII)
View(simulated_data_GPG)
View(simulated_data_OS)
View(simulated_data_TUA)
devtools::document()
