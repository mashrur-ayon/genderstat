{
    "type": [
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        3,
        3,
        3,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2
    ],
    "data": [
        "\nR version 4.2.2 (2022-10-31 ucrt) -- \"Innocent and Trusting\"\nCopyright (C) 2022 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "###################################",
        "> ",
        "# Set the seed for reproducibility",
        "> ",
        "set.seed(123)",
        "> ",
        "##########################",
        "> ",
        "# Generate simulated data for GDI",
        "> ",
        "##########################",
        "> ",
        "##################################",
        "> ",
        "",
        "> ",
        "simulated_data_GDI <- data.frame(",
        "+ ",
        "  country = paste(\"Country\", 1:200), # 200 hypothetical countries",
        "+ ",
        "",
        "+ ",
        "  # Life expectancy (generally ranges between 50 to 85 years)",
        "+ ",
        "  female_life_expectancy = runif(200, 50, 85),",
        "+ ",
        "  male_life_expectancy = runif(200, 50, 85),",
        "+ ",
        "",
        "+ ",
        "  # Mean years of schooling (generally ranges between 1 to 15 years)",
        "+ ",
        "  female_mean_schooling = runif(200, 1, 15),",
        "+ ",
        "  male_mean_schooling = runif(200, 1, 15),",
        "+ ",
        "",
        "+ ",
        "  # GNI per capita (generally ranges between 500 to 75000 USD for a broad representation)",
        "+ ",
        "  female_gni_per_capita = runif(200, 500, 75000),",
        "+ ",
        "  male_gni_per_capita = runif(200, 500, 75000)",
        "+ ",
        ")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "###########################################################",
        "> ",
        "###########################################################",
        "> ",
        "save(simulated_data_GDI, file=\"data/gender_development_index.RData\")",
        "Error in gzfile(file, \"wb\") : cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In gzfile(file, \"wb\") :",
        "\n ",
        " cannot open compressed file 'data/gender_development_index.RData', probable reason 'No such file or directory'\n",
        "> ",
        "save(simulated_data_GDI, file=\"data/gender_development_index.RData\")",
        "> ",
        "###################################",
        "> ",
        "# Set the seed for reproducibility",
        "> ",
        "set.seed(123)",
        "> ",
        "##########################",
        "> ",
        "# Generate simulated data for GEM",
        "> ",
        "##########################",
        "> ",
        "##################################",
        "> ",
        "",
        "> ",
        "simulated_data_GEM <- data.frame(",
        "+ ",
        "  country = paste(\"Country\", 1:200), # 200 hypothetical countries",
        "+ ",
        "",
        "+ ",
        "  # Proportion of seats in parliament held by women (generally ranges between 0 to 100%)",
        "+ ",
        "  female_parliament_seats = runif(200, 0, 100),",
        "+ ",
        "",
        "+ ",
        "  # Percentage of women in professional and technical positions (generally ranges between 0 to 100%)",
        "+ ",
        "  female_professional_positions = runif(200, 0, 100),",
        "+ ",
        "",
        "+ ",
        "  # Ratio of estimated female-to-male earned income (generally ranges between 0 to 100%)",
        "+ ",
        "  female_to_male_earned_income_ratio = runif(200, 0, 100)",
        "+ ",
        ")",
        "> ",
        "save(simulated_data_GDI, file=\"data/gender_empowerment_measure.RData\")",
        "> ",
        "###################################",
        "> ",
        "# Set the seed for reproducibility",
        "> ",
        "set.seed(123)",
        "> ",
        "##########################",
        "> ",
        "# Generate simulated data for GII",
        "> ",
        "##########################",
        "> ",
        "##################################",
        "> ",
        "",
        "> ",
        "simulated_data_GII <- data.frame(",
        "+ ",
        "  country = paste(\"Country\", 1:200), # 200 hypothetical countries",
        "+ ",
        "",
        "+ ",
        "  # Maternal mortality ratio (ranges can vary by country, using a broad range here)",
        "+ ",
        "  maternal_mortality_ratio = runif(200, 10, 200),",
        "+ ",
        "",
        "+ ",
        "  # Adolescent birth rate (ranges can vary by country, using a broad range here)",
        "+ ",
        "  adolescent_birth_rate = runif(200, 10, 100),",
        "+ ",
        "",
        "+ ",
        "  # Proportion of seats in parliament held by women (generally ranges between 0 to 100%)",
        "+ ",
        "  female_parliament_seats = runif(200, 0, 100),",
        "+ ",
        "",
        "+ ",
        "  # Percentage of females with at least some secondary education (generally ranges between 0 to 100%)",
        "+ ",
        "  female_secondary_education = runif(200, 0, 100),",
        "+ ",
        "",
        "+ ",
        "  # Percentage of males with at least some secondary education (generally ranges between 0 to 100%)",
        "+ ",
        "  male_secondary_education = runif(200, 0, 100),",
        "+ ",
        "",
        "+ ",
        "  # Female labor force participation rate (generally ranges between 0 to 100%)",
        "+ ",
        "  female_labor_force = runif(200, 0, 100),",
        "+ ",
        "",
        "+ ",
        "  # Male labor force participation rate (generally ranges between 0 to 100%)",
        "+ ",
        "  male_labor_force = runif(200, 0, 100)",
        "+ ",
        ")",
        "> ",
        "save(simulated_data_GDI, file=\"data/gender_inequality_index.RData\")",
        "> ",
        "###################################",
        "> ",
        "# Set the seed for reproducibility",
        "> ",
        "set.seed(123)",
        "> ",
        "##########################",
        "> ",
        "# Generate simulated data",
        "> ",
        "##########################",
        "> ",
        "##################################",
        "> ",
        "",
        "> ",
        "simulated_data_GPG <- data.frame(",
        "+ ",
        "  person = paste(\"Person\", 1:200), # 200 hypothetical people",
        "+ ",
        "  gender = sample(c(\"Male\", \"Female\"), 200, replace = TRUE), # Randomly assign sex to each person",
        "+ ",
        "  salary = runif(200, 20000, 100000) # Random income between 20000 and 100000",
        "+ ",
        ")",
        "> ",
        "save(simulated_data_GDI, file=\"data/gender_pay_gap.RData\")",
        "> ",
        "###################################",
        "> ",
        "# Set the seed for reproducibility",
        "> ",
        "set.seed(123)",
        "> ",
        "##########################",
        "> ",
        "# Generate simulated data for Occupational Segregation",
        "> ",
        "##########################",
        "> ",
        "##################################",
        "> ",
        "",
        "> ",
        "# Sample occupations",
        "> ",
        "occupations <- c(\"Engineer\", \"Doctor\", \"Teacher\", \"Nurse\", \"Lawyer\", \"Programmer\",",
        "+ ",
        "                 \"Designer\", \"Manager\", \"Clerk\", \"Salesperson\")",
        "> ",
        "",
        "> ",
        "simulated_data_OS <- data.frame(",
        "+ ",
        "  occupation = rep(occupations, each = 20), # 10 hypothetical occupations repeated 20 times",
        "+ ",
        "",
        "+ ",
        "  # Number of men in each occupation (generally ranges between 10 to 1000 for this simulation)",
        "+ ",
        "  male_count = runif(200, 10, 1000),",
        "+ ",
        "",
        "+ ",
        "  # Number of women in each occupation (generally ranges between 10 to 1000 for this simulation)",
        "+ ",
        "  female_count = runif(200, 10, 1000)",
        "+ ",
        ")",
        "> ",
        "save(simulated_data_GDI, file=\"data/occupational_segregation.RData\")",
        "> ",
        "###################################",
        "> ",
        "# Set the seed for reproducibility",
        "> ",
        "set.seed(123)",
        "> ",
        "##########################",
        "> ",
        "# Generate simulated data for Time-use Analysis",
        "> ",
        "##########################",
        "> ",
        "##################################",
        "> ",
        "",
        "> ",
        "simulated_data_TUA <- data.frame(",
        "+ ",
        "  person = 1:200, # 200 hypothetical people",
        "+ ",
        "",
        "+ ",
        "  # Gender assignment",
        "+ ",
        "  gender = sample(c(\"Male\", \"Female\"), 200, replace = TRUE),",
        "+ ",
        "",
        "+ ",
        "  # Hours spent on unpaid work (generally ranges between 0 to 24 hours for this simulation)",
        "+ ",
        "  unpaid_work_hours = runif(200, 0, 24),",
        "+ ",
        "",
        "+ ",
        "  # Hours spent on paid work (generally ranges between 0 to 24 hours for this simulation)",
        "+ ",
        "  paid_work_hours = runif(200, 0, 24)",
        "+ ",
        ")",
        "> ",
        "save(simulated_data_GDI, file=\"data/time_use_analysis.RData\")",
        "> ",
        "#' Gender Development Index (GDI)",
        "> ",
        "#'",
        "> ",
        "#' Computes the Gender Development Index (GDI) based on the given dataset.",
        "> ",
        "#'",
        "> ",
        "#' @param data A data frame containing the required metrics for GDI computation.",
        "> ",
        "#'",
        "> ",
        "#' @return A numeric vector representing the GDI values.",
        "> ",
        "#' ",
        "> ",
        "#' @examples",
        "> ",
        "#' \\dontrun{",
        "> ",
        "#' data(gender_development_index_data) # Load example dataset",
        "> ",
        "#' gdi_results <- gender_development_index(gender_development_index_data)",
        "> ",
        "#' print(gdi_results)",
        "> ",
        "#' }",
        "> ",
        "#' ",
        "> ",
        "#' @export",
        "> ",
        "gender_development_index <- function(data) {",
        "+ ",
        "  ...",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "###########################################################",
        "> ",
        "",
        "> ",
        "gender_development_index <- function(data) {",
        "+ ",
        "  # Check input data for required columns",
        "+ ",
        "  required_columns <- c(\"female_life_expectancy\", \"male_life_expectancy\",",
        "+ ",
        "                        \"female_mean_schooling\", \"male_mean_schooling\",",
        "+ ",
        "                        \"female_gni_per_capita\", \"male_gni_per_capita\")",
        "+ ",
        "  if (!all(required_columns %in% colnames(data))) {",
        "+ ",
        "    stop(\"The input data must contain the required columns for GDI calculation.\")",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  # Calculate HDI components for each gender",
        "+ ",
        "  female_health <- data$female_life_expectancy / 85",
        "+ ",
        "  male_health <- data$male_life_expectancy / 85",
        "+ ",
        "",
        "+ ",
        "  female_education <- data$female_mean_schooling / 15",
        "+ ",
        "  male_education <- data$male_mean_schooling / 15",
        "+ ",
        "",
        "+ ",
        "  female_standard_of_living <- log(data$female_gni_per_capita) / log(75000)",
        "+ ",
        "  male_standard_of_living <- log(data$male_gni_per_capita) / log(75000)",
        "+ ",
        "",
        "+ ",
        "  # Calculate HDI for each gender",
        "+ ",
        "  female_hdi <- (female_health * female_education * female_standard_of_living)^(1/3)",
        "+ ",
        "  male_hdi <- (male_health * male_education * male_standard_of_living)^(1/3)",
        "+ ",
        "",
        "+ ",
        "  # Calculate GDI",
        "+ ",
        "  GDI <- female_hdi / (female_hdi + male_hdi)",
        "+ ",
        "",
        "+ ",
        "  return(GDI)",
        "+ ",
        "}",
        "> ",
        "library(devtools)",
        "Loading required package: usethis\n",
        "Warning messages:\n",
        "1: package ‘devtools’ was built under R version 4.2.3 \n",
        "2: package ‘usethis’ was built under R version 4.2.3 \n",
        "> ",
        "document()",
        "\u001B[38;5;255m\u001B[36mℹ\u001B[38;5;255m Updating \u001B[34mgenderstat\u001B[38;5;255m documentation\u001B[39m\n\u001B[38;5;255mFirst time using roxygen2. Upgrading automatically...\u001B[39m\n\u001B[38;5;255mSetting `RoxygenNote` to \"7.2.3\"\u001B[39m\n\u001B[38;5;255m\u001B[36mℹ\u001B[38;5;255m Loading \u001B[34mgenderstat\u001B[38;5;255m\u001B[39m\n\u001B[38;5;255mWriting \u001B]8;;ide:run:pkgload::dev_help('gender_development_index')\u0007\u001B[34mgender_development_index.Rd\u001B[38;5;255m\u001B]8;;\u0007\u001B[39m\n\u001B[38;5;255mWriting \u001B]8;;ide:run:pkgload::dev_help('gender_empowerment_measure')\u0007\u001B[34mgender_empowerment_measure.Rd\u001B[38;5;255m\u001B]8;;\u0007\u001B[39m\n",
        "\u001B[38;5;255mWriting \u001B]8;;ide:run:pkgload::dev_help('gender_inequality_index')\u0007\u001B[34mgender_inequality_index.Rd\u001B[38;5;255m\u001B]8;;\u0007\u001B[39m\n\u001B[38;5;255mWriting \u001B]8;;ide:run:pkgload::dev_help('gender_pay_gap')\u0007\u001B[34mgender_pay_gap.Rd\u001B[38;5;255m\u001B]8;;\u0007\u001B[39m\n\u001B[38;5;255mWriting \u001B]8;;ide:run:pkgload::dev_help('occupational_segregation')\u0007\u001B[34moccupational_segregation.Rd\u001B[38;5;255m\u001B]8;;\u0007\u001B[39m\n\u001B[38;5;255mWriting \u001B]8;;ide:run:pkgload::dev_help('time_use_analysis')\u0007\u001B[34mtime_use_analysis.Rd\u001B[38;5;255m\u001B]8;;\u0007\u001B[39m\n",
        "Warning messages:\n",
        "1: \u001B[38;5;255m── \u001B[1mConflicts\u001B[22m ──────────────────────────────────── genderstat conflicts\n──\n\u001B[31m✖\u001B[38;5;255m `\u001B[32mgender_development_index\u001B[38;5;255m` masks\n  `\u001B[34mgenderstat\u001B[38;5;255m::gender_development_index()`.\n\u001B[36mℹ\u001B[38;5;255m \u001B[90mDid you accidentally source a file rather than using `load_all()`?\u001B[38;5;255m\n  \u001B[90mRun `rm(list = c(\"gender_development_index\"))` to remove the\u001B[38;5;255m\n  \u001B[90mconflicts.\u001B[38;5;255m\u001B[39m \n",
        "2: \u001B[38;5;255mSkipping \u001B]8;;file://C:/Users/Asus/OneDrive/Documents/GitHub/genderstat/genderstat/NAMESPACE\u0007\u001B[34mNAMESPACE\u001B[38;5;255m\u001B]8;;\u0007\n\u001B[31m✖\u001B[38;5;255m It already exists and was not generated by roxygen2.\u001B[39m \n",
        "> ",
        "#' Gender Empowerment Measure (GEM)",
        "> ",
        "#'",
        "> ",
        "#' Computes the Gender Empowerment Measure (GEM) based on the provided dataset.",
        "> ",
        "#'",
        "> ",
        "#' @param data A data frame containing the required metrics for GEM computation.",
        "> ",
        "#'",
        "> ",
        "#' @return A numeric vector representing the GEM values.",
        "> ",
        "#' ",
        "> ",
        "#' @examples",
        "> ",
        "#' \\dontrun{",
        "> ",
        "#' data(gender_empowerment_measure_data) # Load example dataset",
        "> ",
        "#' gem_results <- gender_empowerment_measure(gender_empowerment_measure_data)",
        "> ",
        "#' print(gem_results)",
        "> ",
        "#' }",
        "> ",
        "#' ",
        "> ",
        "#' @export",
        "> ",
        "gender_empowerment_measure <- function(data) {",
        "+ ",
        "  ...",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "#################################################################################",
        "> ",
        "",
        "> ",
        "gender_empowerment_measure <- function(data) {",
        "+ ",
        "  # Check input data for required columns",
        "+ ",
        "  required_columns <- c(\"female_parliament_seats\", \"female_professional_positions\", \"female_to_male_earned_income_ratio\")",
        "+ ",
        "  if (!all(required_columns %in% colnames(data))) {",
        "+ ",
        "    stop(\"The input data must contain the required columns for GEM calculation.\")",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  # Normalize the input values (0-1 range)",
        "+ ",
        "  data$female_parliament_seats <- data$female_parliament_seats / 100",
        "+ ",
        "  data$female_professional_positions <- data$female_professional_positions / 100",
        "+ ",
        "  data$female_to_male_earned_income_ratio <- data$female_to_male_earned_income_ratio / 100",
        "+ ",
        "",
        "+ ",
        "  # Calculate GEM",
        "+ ",
        "  GEM <- (data$female_parliament_seats +",
        "+ ",
        "            data$female_professional_positions +",
        "+ ",
        "            data$female_to_male_earned_income_ratio) / 3",
        "+ ",
        "",
        "+ ",
        "  return(GEM)",
        "+ ",
        "}",
        "> ",
        "##' Gender Inequality Index (GII)",
        "> ",
        "#'",
        "> ",
        "#' Computes the Gender Inequality Index (GII) based on the provided dataset.",
        "> ",
        "#'",
        "> ",
        "#' @param data A data frame containing the required metrics for GII computation.",
        "> ",
        "#'",
        "> ",
        "#' @return A numeric vector representing the GII values.",
        "> ",
        "#' ",
        "> ",
        "#' @examples",
        "> ",
        "#' \\dontrun{",
        "> ",
        "#' data(gender_inequality_index_data) # Load example dataset",
        "> ",
        "#' gii_results <- gender_inequality_index(gender_inequality_index_data)",
        "> ",
        "#' print(gii_results)",
        "> ",
        "#' }",
        "> ",
        "#' ",
        "> ",
        "#' @export",
        "> ",
        "gender_inequality_index <- function(data) {",
        "+ ",
        "  ...",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "############################################################################",
        "> ",
        "",
        "> ",
        "gender_inequality_index <- function(data) {",
        "+ ",
        "  # Check input data for required columns",
        "+ ",
        "  required_columns <- c(\"maternal_mortality_ratio\", \"adolescent_birth_rate\",",
        "+ ",
        "                        \"female_parliament_seats\", \"female_secondary_education\",",
        "+ ",
        "                        \"male_secondary_education\", \"female_labor_force\", \"male_labor_force\")",
        "+ ",
        "  if (!all(required_columns %in% colnames(data))) {",
        "+ ",
        "    stop(\"The input data must contain the required columns for GII calculation.\")",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  # Calculate GII components",
        "+ ",
        "  H <- data$maternal_mortality_ratio / (data$maternal_mortality_ratio + data$adolescent_birth_rate)",
        "+ ",
        "  E <- data$female_parliament_seats * data$female_secondary_education / (data$female_secondary_education + data$male_secondary_education)",
        "+ ",
        "  L <- data$female_labor_force / (data$female_labor_force + data$male_labor_force)",
        "+ ",
        "",
        "+ ",
        "  # Calculate GII",
        "+ ",
        "  GII <- 1 - (H * E * L)^(1/3)",
        "+ ",
        "",
        "+ ",
        "  return(GII)",
        "+ ",
        "}",
        "> ",
        "#' Calculate the Gender Pay Gap",
        "> ",
        "#'",
        "> ",
        "#' This function calculates the gender pay gap using a data frame containing information on the average income for both men and women.",
        "> ",
        "#' @param data A data frame containing the following columns: 'gender' (factor or character) and 'income' (numeric)",
        "> ",
        "#' @return The gender pay gap as a numeric value (percentage)",
        "> ",
        "#' @export",
        "> ",
        "#' @examples",
        "> ",
        "#' # Load a sample dataset containing income data by gender",
        "> ",
        "#' data(\"sample_income_data\")",
        "> ",
        "#' # Calculate the Gender Pay Gap",
        "> ",
        "#' gender_pay_gap(sample_income_data)",
        "> ",
        "#' Gender Pay Gap (GPG)",
        "> ",
        "#'",
        "> ",
        "#' Computes the Gender Pay Gap (GPG) based on the provided dataset.",
        "> ",
        "#'",
        "> ",
        "#' @param data A data frame containing the required metrics for GPG computation.",
        "> ",
        "#'",
        "> ",
        "#' @return A numeric vector representing the GPG values.",
        "> ",
        "#' ",
        "> ",
        "#' @examples",
        "> ",
        "#' \\dontrun{",
        "> ",
        "#' data(gender_pay_gap_data) # Load example dataset",
        "> ",
        "#' gpg_results <- gender_pay_gap(gender_pay_gap_data)",
        "> ",
        "#' print(gpg_results)",
        "> ",
        "#' }",
        "> ",
        "#' ",
        "> ",
        "#' @export",
        "> ",
        "gender_pay_gap <- function(data) {",
        "+ ",
        "  ...",
        "+ ",
        "}",
        "> ",
        "##########################################################",
        "> ",
        "##########################################################",
        "> ",
        "",
        "> ",
        "gender_pay_gap <- function(data) {",
        "+ ",
        "  # Check input data for required columns",
        "+ ",
        "  if (!all(c(\"salary\", \"gender\") %in% colnames(data))) {",
        "+ ",
        "    stop(\"The input data must contain 'salary' and 'gender' columns.\")",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  # Calculate the average salary for each gender",
        "+ ",
        "  avg_salaries <- aggregate(salary ~ gender, data, mean)",
        "+ ",
        "",
        "+ ",
        "  # Calculate the gender pay gap",
        "+ ",
        "  gpg <- (avg_salaries$salary[avg_salaries$gender == \"male\"] -",
        "+ ",
        "            avg_salaries$salary[avg_salaries$gender == \"female\"]) /",
        "+ ",
        "    avg_salaries$salary[avg_salaries$gender == \"male\"] * 100",
        "+ ",
        "",
        "+ ",
        "  return(gpg)",
        "+ ",
        "}",
        "> ",
        "#' Occupational Segregation Indices",
        "> ",
        "#'",
        "> ",
        "#' Computes the Occupational Segregation Indices based on the provided dataset.",
        "> ",
        "#'",
        "> ",
        "#' @param data A data frame containing the required metrics for occupational segregation computation.",
        "> ",
        "#'",
        "> ",
        "#' @return A numeric vector representing the Occupational Segregation Indices.",
        "> ",
        "#' ",
        "> ",
        "#' @examples",
        "> ",
        "#' \\dontrun{",
        "> ",
        "#' data(occupational_segregation_data) # Load example dataset",
        "> ",
        "#' os_results <- occupational_segregation(occupational_segregation_data)",
        "> ",
        "#' print(os_results)",
        "> ",
        "#' }",
        "> ",
        "#' ",
        "> ",
        "#' @export",
        "> ",
        "occupational_segregation <- function(data) {",
        "+ ",
        "  ...",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "###############################################################################",
        "> ",
        "",
        "> ",
        "occupational_segregation <- function(data) {",
        "+ ",
        "  # Check input data for required columns",
        "+ ",
        "  if (!all(c(\"occupation\", \"male_count\", \"female_count\") %in% colnames(data))) {",
        "+ ",
        "    stop(\"The input data must contain 'occupation', 'male_count', and 'female_count' columns.\")",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  # Calculate the proportion of men and women in each occupation",
        "+ ",
        "  data$male_prop <- data$male_count / (data$male_count + data$female_count)",
        "+ ",
        "  data$female_prop <- data$female_count / (data$male_count + data$female_count)",
        "+ ",
        "",
        "+ ",
        "  # Calculate the index of dissimilarity (D)",
        "+ ",
        "  D <- 0.5 * sum(abs(data$male_prop - data$female_prop))",
        "+ ",
        "",
        "+ ",
        "  return(D)",
        "+ ",
        "}",
        "> ",
        "#' Time-use Analysis Metrics",
        "> ",
        "#'",
        "> ",
        "#' Computes the Time-use Analysis Metrics based on the provided dataset.",
        "> ",
        "#'",
        "> ",
        "#' @param data A data frame containing the required metrics for time-use analysis.",
        "> ",
        "#'",
        "> ",
        "#' @return A numeric vector representing the Time-use Analysis Metrics.",
        "> ",
        "#' ",
        "> ",
        "#' @examples",
        "> ",
        "#' \\dontrun{",
        "> ",
        "#' data(time_use_analysis_data) # Load example dataset",
        "> ",
        "#' tua_results <- time_use_analysis(time_use_analysis_data)",
        "> ",
        "#' print(tua_results)",
        "> ",
        "#' }",
        "> ",
        "#' ",
        "> ",
        "#' @export",
        "> ",
        "time_use_analysis <- function(data) {",
        "+ ",
        "  ...",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "################################################################################",
        "> ",
        "time_use_analysis <- function(data) {",
        "+ ",
        "  # Check input data for required columns",
        "+ ",
        "  if (!all(c(\"gender\", \"unpaid_work_hours\", \"paid_work_hours\") %in% colnames(data))) {",
        "+ ",
        "    stop(\"The input data must contain 'gender', 'unpaid_work_hours', and 'paid_work_hours' columns.\")",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  # Calculate the average time spent on unpaid and paid work for each gender",
        "+ ",
        "  avg_time_use <- aggregate(cbind(unpaid_work_hours, paid_work_hours) ~ gender, data, mean)",
        "+ ",
        "",
        "+ ",
        "  return(avg_time_use)",
        "+ ",
        "}",
        "> ",
        "#' Gender Development Index (GDI)",
        "> ",
        "#'",
        "> ",
        "#' Computes the Gender Development Index (GDI) based on the given dataset.",
        "> ",
        "#'",
        "> ",
        "#' @param data A data frame containing the required metrics for GDI computation.",
        "> ",
        "#'",
        "> ",
        "#' @return A numeric vector representing the GDI values.",
        "> ",
        "#'",
        "> ",
        "#' @examples",
        "> ",
        "#' \\dontrun{",
        "> ",
        "#' data(gender_development_index_data) # Load example dataset",
        "> ",
        "#' gdi_results <- gender_development_index(gender_development_index_data)",
        "> ",
        "#' print(gdi_results)",
        "> ",
        "#' }",
        "> ",
        "#'",
        "> ",
        "#' @export",
        "> ",
        "gender_development_index <- function(data) {",
        "+ ",
        "  ...",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "###########################################################",
        "> ",
        "",
        "> ",
        "gender_development_index <- function(data) {",
        "+ ",
        "  # Check input data for required columns",
        "+ ",
        "  required_columns <- c(\"female_life_expectancy\", \"male_life_expectancy\",",
        "+ ",
        "                        \"female_mean_schooling\", \"male_mean_schooling\",",
        "+ ",
        "                        \"female_gni_per_capita\", \"male_gni_per_capita\")",
        "+ ",
        "  if (!all(required_columns %in% colnames(data))) {",
        "+ ",
        "    stop(\"The input data must contain the required columns for GDI calculation.\")",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  # Calculate HDI components for each gender",
        "+ ",
        "  female_health <- data$female_life_expectancy / 85",
        "+ ",
        "  male_health <- data$male_life_expectancy / 85",
        "+ ",
        "",
        "+ ",
        "  female_education <- data$female_mean_schooling / 15",
        "+ ",
        "  male_education <- data$male_mean_schooling / 15",
        "+ ",
        "",
        "+ ",
        "  female_standard_of_living <- log(data$female_gni_per_capita) / log(75000)",
        "+ ",
        "  male_standard_of_living <- log(data$male_gni_per_capita) / log(75000)",
        "+ ",
        "",
        "+ ",
        "  # Calculate HDI for each gender",
        "+ ",
        "  female_hdi <- (female_health * female_education * female_standard_of_living)^(1/3)",
        "+ ",
        "  male_hdi <- (male_health * male_education * male_standard_of_living)^(1/3)",
        "+ ",
        "",
        "+ ",
        "  # Calculate GDI",
        "+ ",
        "  GDI <- female_hdi / (female_hdi + male_hdi)",
        "+ ",
        "",
        "+ ",
        "  return(GDI)",
        "+ ",
        "}",
        "> ",
        "devtools::document()",
        "\u001B[38;5;255m\u001B[36mℹ\u001B[38;5;255m Updating \u001B[34mgenderstat\u001B[38;5;255m documentation\u001B[39m\n\u001B[38;5;255m\u001B[36mℹ\u001B[38;5;255m Loading \u001B[34mgenderstat\u001B[38;5;255m\u001B[39m\n\u001B[38;5;255mWriting \u001B]8;;ide:run:pkgload::dev_help('gender_empowerment_measure')\u0007\u001B[34mgender_empowerment_measure.Rd\u001B[38;5;255m\u001B]8;;\u0007\u001B[39m\n\u001B[38;5;255mWriting \u001B]8;;ide:run:pkgload::dev_help('gender_inequality_index')\u0007\u001B[34mgender_inequality_index.Rd\u001B[38;5;255m\u001B]8;;\u0007\u001B[39m\n\u001B[38;5;255mWriting \u001B]8;;ide:run:pkgload::dev_help('gender_pay_gap')\u0007\u001B[34mgender_pay_gap.Rd\u001B[38;5;255m\u001B]8;;\u0007\u001B[39m\n",
        "\u001B[38;5;255mWriting \u001B]8;;ide:run:pkgload::dev_help('occupational_segregation')\u0007\u001B[34moccupational_segregation.Rd\u001B[38;5;255m\u001B]8;;\u0007\u001B[39m\n\u001B[38;5;255mWriting \u001B]8;;ide:run:pkgload::dev_help('time_use_analysis')\u0007\u001B[34mtime_use_analysis.Rd\u001B[38;5;255m\u001B]8;;\u0007\u001B[39m\n",
        "Warning messages:\n",
        "1: \u001B[38;5;255m── \u001B[1mConflicts\u001B[22m ──────────────────────────────────── genderstat conflicts\n──\n\u001B[31m✖\u001B[38;5;255m `\u001B[32mgender_development_index\u001B[38;5;255m` masks\n  `\u001B[34mgenderstat\u001B[38;5;255m::gender_development_index()`.\n\u001B[31m✖\u001B[38;5;255m `\u001B[32mgender_empowerment_measure\u001B[38;5;255m` masks\n  `\u001B[34mgenderstat\u001B[38;5;255m::gender_empowerment_measure()`.\n\u001B[31m✖\u001B[38;5;255m `\u001B[32mgender_inequality_index\u001B[38;5;255m` masks\n  `\u001B[34mgenderstat\u001B[38;5;255m::gender_inequality_index()`.\n  … and more.\n\u001B[36mℹ\u001B[38;5;255m \u001B[90mDid you accidentally source a file rather than using `load_all()`?\u001B[38;5;255m\n  \u001B[90mRun `rm(list = c(\"gender_development_index\",\u001B[38;5;255m\n  \u001B[90m\"gender_empowerment_measure\", \"gender_inequality_index\",\u001B[38;5;255m\n  \u001B[90m\"gender_pay_gap\", \"occupational_segregation\", \"time_use_analysis\"))`\u001B[38;5;255m\n  \u001B[90mto remove the conflicts.\u001B[38;5;255m\u001B[39m \n",
        "2: \u001B[38;5;255mSkipping \u001B]8;;file://C:/Users/Asus/OneDrive/Documents/GitHub/genderstat/genderstat/NAMESPACE\u0007\u001B[34mNAMESPACE\u001B[38;5;255m\u001B]8;;\u0007\n\u001B[31m✖\u001B[38;5;255m It already exists and was not generated by roxygen2.\u001B[39m \n",
        "\nRestarting R session...\n\n",
        "> ",
        "devtools::load_all()",
        "\u001B[38;5;255m\u001B[36mℹ\u001B[38;5;255m Loading \u001B[34mgenderstat\u001B[38;5;255m\u001B[39m\n",
        "> ",
        "devtools::document()",
        "\u001B[38;5;255m\u001B[36mℹ\u001B[38;5;255m Updating \u001B[34mgenderstat\u001B[38;5;255m documentation\u001B[39m\n\u001B[38;5;255m\u001B[36mℹ\u001B[38;5;255m Loading \u001B[34mgenderstat\u001B[38;5;255m\u001B[39m\n\u001B[38;5;255mWriting \u001B]8;;file://C:/Users/Asus/OneDrive/Documents/GitHub/genderstat/genderstat/NAMESPACE\u0007\u001B[34mNAMESPACE\u001B[38;5;255m\u001B]8;;\u0007\u001B[39m\n\u001B[38;5;255mWriting \u001B]8;;file://C:/Users/Asus/OneDrive/Documents/GitHub/genderstat/genderstat/NAMESPACE\u0007\u001B[34mNAMESPACE\u001B[38;5;255m\u001B]8;;\u0007\u001B[39m\n",
        "> ",
        "load(\"C:/Users/Asus/OneDrive/Documents/GitHub/genderstat/genderstat/data/gender_development_index.RData\")",
        "\nRestarting R session...\n\n\nRestarting R session...\n\n\nRestarting R session...\n\n"
    ]
}